import math
import os
import sys
from datetime import datetime

class Calculadora:
    def __init__(self):
        self.historico = []
        self.memoria = 0
        self.ultimo_resultado = 0
        self.ligada = True
        
    def limpar_tela(self):
        """Limpa a tela do terminal"""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def exibir_cabecalho(self):
        """Exibe o cabe√ßalho da calculadora"""
        print("=" * 60)
        print("            üßÆ CALCULADORA AVAN√áADA v2.0 üßÆ")
        print("=" * 60)
        print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        print(f"Mem√≥ria: {self.memoria}")
        print(f"√öltimo resultado: {self.ultimo_resultado}")
        print("-" * 60)
    
    def exibir_menu(self):
        """Exibe o menu de opera√ß√µes dispon√≠veis"""
        print("\nüìã OPERA√á√ïES DISPON√çVEIS:")
        print("1.  Adi√ß√£o (+)")
        print("2.  Subtra√ß√£o (-)")
        print("3.  Multiplica√ß√£o (√ó)")
        print("4.  Divis√£o (√∑)")
        print("5.  Pot√™ncia (^)")
        print("6.  Raiz Quadrada (‚àö)")
        print("7.  Porcentagem (%)")
        print("8.  Logaritmo (log)")
        print("9.  Seno (sin)")
        print("10. Cosseno (cos)")
        print("11. Tangente (tan)")
        print("12. Fatorial (!)")
        print("13. Mem√≥ria (M+)")
        print("14. Limpar Mem√≥ria (MC)")
        print("15. Ver Hist√≥rico")
        print("16. Limpar Hist√≥rico")
        print("17. Desligar")
        print("-" * 60)
    
    def validar_numero(self, mensagem):
        """Valida a entrada de n√∫meros"""
        while True:
            try:
                valor = input(mensagem)
                if valor.upper() == 'M':  # Usar valor da mem√≥ria
                    return self.memoria
                elif valor.upper() == 'ANS':  # Usar √∫ltimo resultado
                    return self.ultimo_resultado
                else:
                    return float(valor)
            except ValueError:
                print("‚ùå Erro: Por favor, digite um n√∫mero v√°lido!")
    
    def adicionar_historico(self, operacao, resultado):
        """Adiciona opera√ß√£o ao hist√≥rico"""
        entrada = {
            'timestamp': datetime.now().strftime('%H:%M:%S'),
            'operacao': operacao,
            'resultado': resultado
        }
        self.historico.append(entrada)
        self.ultimo_resultado = resultado
    
    def exibir_historico(self):
        """Exibe o hist√≥rico de opera√ß√µes"""
        self.limpar_tela()
        self.exibir_cabecalho()
        print("\nüìú HIST√ìRICO DE OPERA√á√ïES:")
        if not self.historico:
            print("Nenhuma opera√ß√£o realizada ainda.")
        else:
            for i, entrada in enumerate(self.historico[-10:], 1):  # Mostra √∫ltimas 10
                print(f"{i}. [{entrada['timestamp']}] {entrada['operacao']} = {entrada['resultado']}")
        
        input("\nPressione Enter para continuar...")
    
    def adicao(self):
        """Opera√ß√£o de adi√ß√£o"""
        print("\n‚ûï ADI√á√ÉO")
        num1 = self.validar_numero("Digite o primeiro n√∫mero (ou 'M' para mem√≥ria, 'ANS' para √∫ltimo resultado): ")
        num2 = self.validar_numero("Digite o segundo n√∫mero: ")
        resultado = num1 + num2
        operacao = f"{num1} + {num2}"
        self.adicionar_historico(operacao, resultado)
        return resultado
    
    def subtracao(self):
        """Opera√ß√£o de subtra√ß√£o"""
        print("\n‚ûñ SUBTRA√á√ÉO")
        num1 = self.validar_numero("Digite o primeiro n√∫mero (ou 'M' para mem√≥ria, 'ANS' para √∫ltimo resultado): ")
        num2 = self.validar_numero("Digite o segundo n√∫mero: ")
        resultado = num1 - num2
        operacao = f"{num1} - {num2}"
        self.adicionar_historico(operacao, resultado)
        return resultado
    
    def multiplicacao(self):
        """Opera√ß√£o de multiplica√ß√£o"""
        print("\n‚úñÔ∏è MULTIPLICA√á√ÉO")
        num1 = self.validar_numero("Digite o primeiro n√∫mero (ou 'M' para mem√≥ria, 'ANS' para √∫ltimo resultado): ")
        num2 = self.validar_numero("Digite o segundo n√∫mero: ")
        resultado = num1 * num2
        operacao = f"{num1} √ó {num2}"
        self.adicionar_historico(operacao, resultado)
        return resultado
    
    def divisao(self):
        """Opera√ß√£o de divis√£o"""
        print("\n‚ûó DIVIS√ÉO")
        num1 = self.validar_numero("Digite o primeiro n√∫mero (ou 'M' para mem√≥ria, 'ANS' para √∫ltimo resultado): ")
        
        while True:
            num2 = self.validar_numero("Digite o segundo n√∫mero (n√£o pode ser zero): ")
            if num2 != 0:
                break
            print("‚ùå Erro: Divis√£o por zero n√£o √© permitida!")
        
        resultado = num1 / num2
        operacao = f"{num1} √∑ {num2}"
        self.adicionar_historico(operacao, resultado)
        return resultado
    
    def potencia(self):
        """Opera√ß√£o de pot√™ncia"""
        print("\nüî∫ POT√äNCIA")
        base = self.validar_numero("Digite a base (ou 'M' para mem√≥ria, 'ANS' para √∫ltimo resultado): ")
        expoente = self.validar_numero("Digite o expoente: ")
        resultado = base ** expoente
        operacao = f"{base} ^ {expoente}"
        self.adicionar_historico(operacao, resultado)
        return resultado
    
    def raiz_quadrada(self):
        """Opera√ß√£o de raiz quadrada"""
        print("\n‚àö RAIZ QUADRADA")
        
        while True:
            numero = self.validar_numero("Digite o n√∫mero (deve ser positivo): ")
            if numero >= 0:
                break
            print("‚ùå Erro: N√£o √© poss√≠vel calcular raiz de n√∫mero negativo!")
        
        resultado = math.sqrt(numero)
        operacao = f"‚àö{numero}"
        self.adicionar_historico(operacao, resultado)
        return resultado
    
    def porcentagem(self):
        """Opera√ß√£o de porcentagem"""
        print("\n% PORCENTAGEM")
        numero = self.validar_numero("Digite o n√∫mero: ")
        percentual = self.validar_numero("Digite a porcentagem: ")
        resultado = (numero * percentual) / 100
        operacao = f"{percentual}% de {numero}"
        self.adicionar_historico(operacao, resultado)
        return resultado
    
    def logaritmo(self):
        """Opera√ß√£o de logaritmo"""
        print("\nüìä LOGARITMO")
        
        while True:
            numero = self.validar_numero("Digite o n√∫mero (deve ser positivo): ")
            if numero > 0:
                break
            print("‚ùå Erro: N√∫mero deve ser maior que zero!")
        
        while True:
            base = self.validar_numero("Digite a base do logaritmo (deve ser positiva e diferente de 1): ")
            if base > 0 and base != 1:
                break
            print("‚ùå Erro: Base deve ser positiva e diferente de 1!")
        
        resultado = math.log(numero, base)
        operacao = f"log{base}({numero})"
        self.adicionar_historico(operacao, resultado)
        return resultado
    
    def seno(self):
        """Opera√ß√£o de seno"""
        print("\nüìê SENO")
        angulo = self.validar_numero("Digite o √¢ngulo em graus: ")
        resultado = math.sin(math.radians(angulo))
        operacao = f"sin({angulo}¬∞)"
        self.adicionar_historico(operacao, resultado)
        return resultado
    
    def cosseno(self):
        """Opera√ß√£o de cosseno"""
        print("\nüìê COSSENO")
        angulo = self.validar_numero("Digite o √¢ngulo em graus: ")
        resultado = math.cos(math.radians(angulo))
        operacao = f"cos({angulo}¬∞)"
        self.adicionar_historico(operacao, resultado)
        return resultado
    
    def tangente(self):
        """Opera√ß√£o de tangente"""
        print("\nüìê TANGENTE")
        angulo = self.validar_numero("Digite o √¢ngulo em graus: ")
        
        # Verificar se o √¢ngulo n√£o √© 90¬∞ + k*180¬∞
        if (angulo % 180) == 90:
            print("‚ùå Erro: Tangente n√£o definida para este √¢ngulo!")
            return None
        
        resultado = math.tan(math.radians(angulo))
        operacao = f"tan({angulo}¬∞)"
        self.adicionar_historico(operacao, resultado)
        return resultado
    
    def fatorial(self):
        """Opera√ß√£o de fatorial"""
        print("\n‚ùó FATORIAL")
        
        while True:
            numero = self.validar_numero("Digite um n√∫mero inteiro n√£o negativo: ")
            if numero >= 0 and numero == int(numero):
                break
            print("‚ùå Erro: N√∫mero deve ser inteiro n√£o negativo!")
        
        resultado = math.factorial(int(numero))
        operacao = f"{int(numero)}!"
        self.adicionar_historico(operacao, resultado)
        return resultado
    
    def adicionar_memoria(self, valor):
        """Adiciona valor √† mem√≥ria"""
        self.memoria += valor
        print(f"‚úÖ Valor {valor} adicionado √† mem√≥ria. Mem√≥ria atual: {self.memoria}")
    
    def limpar_memoria(self):
        """Limpa a mem√≥ria"""
        self.memoria = 0
        print("‚úÖ Mem√≥ria limpa!")
    
    def executar_operacao(self, opcao):
        """Executa a opera√ß√£o selecionada"""
        operacoes = {
            1: self.adicao,
            2: self.subtracao,
            3: self.multiplicacao,
            4: self.divisao,
            5: self.potencia,
            6: self.raiz_quadrada,
            7: self.porcentagem,
            8: self.logaritmo,
            9: self.seno,
            10: self.cosseno,
            11: self.tangente,
            12: self.fatorial
        }
        
        if opcao in operacoes:
            try:
                resultado = operacoes[opcao]()
                if resultado is not None:
                    print(f"\nüéØ RESULTADO: {resultado}")
                    
                    # Perguntar se deseja armazenar na mem√≥ria
                    if input("\nDeseja adicionar este valor √† mem√≥ria? (s/n): ").lower() == 's':
                        self.adicionar_memoria(resultado)
                
                input("\nPressione Enter para continuar...")
                
            except Exception as e:
                print(f"‚ùå Erro durante a opera√ß√£o: {e}")
                input("\nPressione Enter para continuar...")
        
        elif opcao == 13:
            valor = self.validar_numero("Digite o valor para adicionar √† mem√≥ria: ")
            self.adicionar_memoria(valor)
            input("\nPressione Enter para continuar...")
        
        elif opcao == 14:
            self.limpar_memoria()
            input("\nPressione Enter para continuar...")
        
        elif opcao == 15:
            self.exibir_historico()
        
        elif opcao == 16:
            self.historico.clear()
            print("‚úÖ Hist√≥rico limpo!")
            input("\nPressione Enter para continuar...")
        
        elif opcao == 17:
            print("\nüëã Obrigado por usar a calculadora! At√© logo!")
            self.ligada = False
        
        else:
            print("‚ùå Op√ß√£o inv√°lida! Tente novamente.")
            input("\nPressione Enter para continuar...")
    
    def iniciar(self):
        """Inicia a calculadora"""
        while self.ligada:
            self.limpar_tela()
            self.exibir_cabecalho()
            self.exibir_menu()
            
            try:
                opcao = int(input("\nüìù Digite o n√∫mero da opera√ß√£o desejada: "))
                self.executar_operacao(opcao)
            except ValueError:
                print("‚ùå Erro: Por favor, digite um n√∫mero v√°lido!")
                input("\nPressione Enter para continuar...")
            except KeyboardInterrupt:
                print("\n\nüëã Calculadora encerrada pelo usu√°rio!")
                break

# Executar a calculadora
if __name__ == "__main__":
    calculadora = Calculadora()
    calculadora.iniciar()
