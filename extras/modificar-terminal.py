#!/usr/bin/env python3
import os
import sys
import subprocess
import shutil
from pathlib import Path

# Cores para o terminal
class Colors:
    RESET = '\033[0m'
    BOLD = '\033[1m'
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'

def check_termux():
    """Verifica se está no Termux"""
    return os.path.exists('/data/data/com.termux/files/home')

def install_dependencies():
    """Instala dependências necessárias"""
    if not check_termux():
        print(f"{Colors.RED}Este script é específico para Termux!{Colors.RESET}")
        sys.exit(1)
    
    print(f"{Colors.YELLOW}Instalando dependências...{Colors.RESET}")
    os.system('pkg update -y')
    os.system('pkg install -y python figlet lolcat neofetch')

def backup_original():
    """Faz backup dos arquivos originais"""
    home = Path.home()
    bashrc = home / '.bashrc'
    if bashrc.exists():
        shutil.copy2(bashrc, home / '.bashrc.backup')
        print(f"{Colors.GREEN}Backup do .bashrc criado!{Colors.RESET}")

def show_banner_options():
    """Mostra opções de banner"""
    print(f"\n{Colors.CYAN}{Colors.BOLD}🎨 OPÇÕES DE BANNER:{Colors.RESET}")
    options = [
        ("1", "Kali Linux Style", "figlet -f slant 'PolyTools' | lolcat"),
        ("2", "Matrix Style", "figlet -f digital 'PolyTools' | lolcat"),
        ("3", "Standard", "figlet -f standard 'PolyTools' | lolcat"),
        ("4", "Small", "figlet -f small 'PolyTools' | lolcat"),
        ("5", "Neofetch", "neofetch"),
        ("6", "Customizado", "echo 'PolyTools Terminal'"),
        ("7", "Nenhum", "")
    ]
    
    for opt in options:
        print(f"{Colors.YELLOW}{opt[0]}. {opt[1]}{Colors.RESET}")

def show_color_schemes():
    """Mostra esquemas de cores"""
    print(f"\n{Colors.CYAN}{Colors.BOLD}🎯 ESQUEMAS DE CORES DO PROMPT:{Colors.RESET}")
    schemes = [
        ("1", "Kali Linux (Vermelho/Preto)", "RED", "BLACK"),
        ("2", "Hacker (Verde/Preto)", "GREEN", "BLACK"),
        ("3", "Cyber (Azul/Ciano)", "BLUE", "CYAN"),
        ("4", "Neon (Magenta/Preto)", "MAGENTA", "BLACK"),
        ("5", "Profissional (Branco/Azul)", "WHITE", "BLUE"),
        ("6", "Personalizado", "CUSTOM", "CUSTOM")
    ]
    
    for scheme in schemes:
        print(f"{Colors.YELLOW}{scheme[0]}. {scheme[1]}{Colors.RESET}")

def get_color_code(color_name):
    """Retorna código da cor"""
    colors = {
        'RED': '\\[\\033[91m\\]',
        'GREEN': '\\[\\033[92m\\]',
        'YELLOW': '\\[\\033[93m\\]',
        'BLUE': '\\[\\033[94m\\]',
        'MAGENTA': '\\[\\033[95m\\]',
        'CYAN': '\\[\\033[96m\\]',
        'WHITE': '\\[\\033[97m\\]',
        'BLACK': '\\[\\033[90m\\]'
    }
    return colors.get(color_name, '\\[\\033[92m\\]')

def create_bashrc_config():
    """Cria a configuração personalizada do .bashrc"""
    print(f"\n{Colors.CYAN}🎭 CONFIGURAÇÃO DO TERMINAL{Colors.RESET}")
    
    # Banner
    show_banner_options()
    banner_choice = input(f"\n{Colors.GREEN}Escolha o banner (1-7): {Colors.RESET}").strip()
    
    banner_commands = {
        '1': "figlet -f slant 'PolyTools' | lolcat",
        '2': "figlet -f digital 'PolyTools' | lolcat", 
        '3': "figlet -f standard 'PolyTools' | lolcat",
        '4': "figlet -f small 'PolyTools' | lolcat",
        '5': "neofetch",
        '6': "echo '🔧 PolyTools Terminal 🔧'",
        '7': ""
    }
    
    banner_cmd = banner_commands.get(banner_choice, "")
    
    # Esquema de cores
    show_color_schemes()
    color_choice = input(f"\n{Colors.GREEN}Escolha o esquema de cores (1-6): {Colors.RESET}").strip()
    
    color_schemes = {
        '1': ('RED', 'BLACK'),
        '2': ('GREEN', 'BLACK'),
        '3': ('BLUE', 'CYAN'),
        '4': ('MAGENTA', 'BLACK'),
        '5': ('WHITE', 'BLUE'),
        '6': ('CUSTOM', 'CUSTOM')
    }
    
    prompt_color, text_color = color_schemes.get(color_choice, ('GREEN', 'BLACK'))
    
    if color_choice == '6':
        print(f"\n{Colors.YELLOW}Cores disponíveis: RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, BLACK{Colors.RESET}")
        prompt_color = input(f"{Colors.GREEN}Cor do prompt: {Colors.RESET}").upper()
        text_color = input(f"{Colors.GREEN}Cor do texto: {Colors.RESET}").upper()
    
    # Remover banner do Termux
    remove_termux_banner = input(f"\n{Colors.GREEN}Remover banner inicial do Termux? (s/n): {Colors.RESET}").lower().strip()
    
    # Criar conteúdo do .bashrc
    bashrc_content = f"""#!/bin/bash
# PolyTools Custom Terminal Configuration
# Generated by PolyTools Configurator

# Remover banner do Termux
{"[ -z $TERMUX_VERSION ] || termux-wake-lock" if remove_termux_banner == 's' else ""}

# Aliases úteis
alias ll='ls -la'
alias cls='clear'
alias update='pkg update && pkg upgrade'
alias polyconfig='python ~/.polytools/config.py'

# Configuração do prompt
PS1='{get_color_code(prompt_color)}┌─[{get_color_code(text_color)}PolyTools{get_color_code(prompt_color)}@\\h]-[\\w]\\n└──╼ {get_color_code(text_color)}\\\$ {get_color_code(prompt_color)}]{Colors.RESET} '

# Cores para ls
alias ls='ls --color=auto'
alias dir='dir --color=auto'
alias vdir='vdir --color=auto'

# Banner personalizado
echo -e "\\\\033[1;32m"
{banner_cmd if banner_cmd else "# Sem banner"}
echo -e "\\\\033[0m"

# Mensagem de boas-vindas
echo -e "\\\\033[1;36m🔧 PolyTools Terminal - Pronto para uso! 🔧\\\\033[0m"
echo ""

# Configurações de histórico
HISTSIZE=1000
HISTFILESIZE=2000
"""

    return bashrc_content

def apply_configuration():
    """Aplica a configuração personalizada"""
    home = Path.home()
    bashrc_path = home / '.bashrc'
    polytools_dir = home / '.polytools'
    
    # Criar diretório PolyTools
    polytools_dir.mkdir(exist_ok=True)
    
    # Criar arquivo de configuração
    config_content = create_bashrc_config()
    
    with open(bashrc_path, 'w') as f:
        f.write(config_content)
    
    # Salvar configuração para backup
    with open(polytools_dir / 'bashrc_backup', 'w') as f:
        f.write(config_content)
    
    print(f"\n{Colors.GREEN}✅ Configuração aplicada com sucesso!{Colors.RESET}")

def restore_original():
    """Restaura configuração original"""
    home = Path.home()
    bashrc_path = home / '.bashrc'
    backup_path = home / '.bashrc.backup'
    
    if backup_path.exists():
        shutil.copy2(backup_path, bashrc_path)
        print(f"{Colors.GREEN}✅ Configuração original restaurada!{Colors.RESET}")
    else:
        # Criar .bashrc padrão
        default_bashrc = """#!/bin/bash
# Default Termux bashrc
[ -z $TERMUX_VERSION ] || termux-wake-lock
PS1='\\[\\033[1;32m\\]\\w\\[\\033[0m\\] \\$ '
"""
        with open(bashrc_path, 'w') as f:
            f.write(default_bashrc)
        print(f"{Colors.YELLOW}⚠️  Criado .bashrc padrão{Colors.RESET}")

def show_menu():
    """Mostra menu principal"""
    print(f"""
{Colors.CYAN}{Colors.BOLD}
    ██████╗  ██████╗ ██╗  ██╗   ██╗████████╗ ██████╗  ██████╗ ██╗     ███████╗
    ██╔══██╗██╔═══██╗██║  ╚██╗ ██╔╝╚══██╔══╝██╔═══██╗██╔═══██╗██║     ██╔════╝
    ██████╔╝██║   ██║██║   ╚████╔╝    ██║   ██║   ██║██║   ██║██║     ███████╗
    ██╔═══╝ ██║   ██║██║    ╚██╔╝     ██║   ██║   ██║██║   ██║██║     ╚════██║
    ██║     ╚██████╔╝███████╗██║      ██║   ╚██████╔╝╚██████╔╝███████╗███████║
    ╚═╝      ╚═════╝ ╚══════╝╚═╝      ╚═╝    ╚═════╝  ╚═════╝ ╚══════╝╚══════╝
{Colors.RESET}
{Colors.YELLOW}🎯 Personalizador de Terminal para Termux{Colors.RESET}
    """)
    
    print(f"{Colors.GREEN}1. 🎨 Personalizar Terminal{Colors.RESET}")
    print(f"{Colors.GREEN}2. 🔄 Restaurar Original{Colors.RESET}")
    print(f"{Colors.GREEN}3. 📦 Instalar Dependências{Colors.RESET}")
    print(f"{Colors.GREEN}4. 🚪 Sair{Colors.RESET}")

def main():
    """Função principal"""
    if not check_termux():
        print(f"{Colors.RED}❌ Este script funciona apenas no Termux!{Colors.RESET}")
        sys.exit(1)
    
    while True:
        show_menu()
        choice = input(f"\n{Colors.BLUE}Escolha uma opção (1-4): {Colors.RESET}").strip()
        
        if choice == '1':
            backup_original()
            apply_configuration()
            print(f"\n{Colors.GREEN}💡 Reinicie o terminal ou execute: source ~/.bashrc{Colors.RESET}")
            
        elif choice == '2':
            restore_original()
            print(f"\n{Colors.GREEN}💡 Reinicie o terminal para ver as mudanças{Colors.RESET}")
            
        elif choice == '3':
            install_dependencies()
            
        elif choice == '4':
            print(f"{Colors.YELLOW}👋 Saindo...{Colors.RESET}")
            break
            
        else:
            print(f"{Colors.RED}❌ Opção inválida!{Colors.RESET}")
        
        input(f"\n{Colors.CYAN}Pressione Enter para continuar...{Colors.RESET}")
        os.system('clear')

if __name__ == "__main__":
    main()
